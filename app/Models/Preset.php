<?php

namespace App\Models;

use App\Enums\DeliveryCompany;
use App\Enums\StatePresetProduct;
use App\Enums\TypeAuthenthication;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Preset extends Model
{
    use HasFactory;

    protected $casts = [
        'will_prototype_finished_at' => 'date',
        'delivery_at' => 'date',
    ];

    protected $guarded = ['id'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function order()
    {
        return $this->belongsTo(Order::class);
    }

    public function cart()
    {
        return $this->belongsTo(Cart::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function products()
    {
        return $this->belongsToMany(Product::class)->withPivot([
            'uuid',
            'additional',

            'count',
            'color_id',
            'size_id',

            'product_title',
            'price',
            'price_discount',
            'price_origin',
            'price_delivery',
            'size_title',
            'size_price',
            'color_title',
        ])->withTimestamps();
    }

    public function presetProducts()
    {
        return $this->hasMany(PresetProduct::class);
    }

    public function getCanOrderAttribute()
    {
        $presetProducts = $this->presetProducts;

        foreach($presetProducts as $presetProduct){
            if(!$presetProduct->can_order)
                return 0;
        }

        return 1;
    }

    public function attachProducts($request)
    {
        foreach($request->products as $productData){
            $product = Product::find($productData['id']);
            $size = Size::find($productData['size_id']);
            $color = Color::find($productData['color_id']);

            $this->products()->attach($product->id, [
                'uuid' => Generator::createUuid(new PresetProduct()),
                'additional' => 0,
                'count' => $productData['count'],
                'color_id' => $productData['color_id'],
                'size_id' => $productData['size_id'],

                'product_title' => $product->title,
                'price' => $product->price,
                'price_discount' => $product->price_discount,
                'price_origin' => $product->price_origin,
                'price_delivery' => $product->price_delivery,
                'size_title' => $size->title,
                'size_price' => $size->price,
                'color_title' => $color->title,
            ]);
        }

        if(is_array($request->additionalProducts)){
             foreach($request->additionalProducts as $additionalProductData){
                 $additionalProduct = Product::find($additionalProductData['id']);

                 $this->products()->attach($additionalProduct->id, [
                     'uuid' => Generator::createUuid(new PresetProduct()),
                     'additional' => 1,
                     'count' => $additionalProductData['count'],
                     'product_title' => $additionalProduct->title,
                     'price' => $additionalProduct->price,
                 ]);
             }
        }

    }

    public function syncProducts()
    {
        $presetProducts = $this->presetProducts;

        foreach($presetProducts as $presetProduct){
            $presetProduct->update([
                'product_title' => $presetProduct->product->title,
                'price' => $presetProduct->product->price,
                'price_discount' => $presetProduct->product->price_discount,
                'price_origin' => $presetProduct->product->price_origin,
                'price_delivery' => $presetProduct->product->price_delivery,
                'size_title' => $presetProduct->size ? $presetProduct->size->title : '판매중단 사이즈',
                'size_price' => $presetProduct->size ? $presetProduct->size->price : '-',
                'color_title' => $presetProduct->color ? $presetProduct->color->title : "판매중단 색상",
            ]);
        }
    }

    public function hasPermission($guestId)
    {
        if(auth()->user() && auth()->id() == $this->user_id)
            return 1;

        if(!auth()->user() && $guestId == $this->guest_id)
            return 1;

        return 0;
    }

    public function getFormatOptionsAttribute()
    {
        $items = [];

        $presetProducts = $this->presetProducts()->where('additional', 0)->get();

        foreach($presetProducts as $presetProduct){
            $items[] = "{$presetProduct->color_title} - {$presetProduct->size_title}";
        }

        return Arr::getArrayToString($items);
    }
}
