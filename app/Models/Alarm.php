<?php

namespace App\Models;

use App\Enums\DeliveryCompany;
use App\Enums\TypeAlarm;
use App\Http\Controllers\Api\EstimateController;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Alarm extends Model
{
    use HasFactory;

    protected $guarded = ['id'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model){
            /*$kakao = new Kakao();

            $kakao->send($model->contact, $model->getData(), TypeAlarm::getTemplateId($model->type));*/
        });
    }

    public function getData()
    {
        $user = User::withTrashed()->find($this->user_id);
        $qna = Qna::find($this->qna_id);
        $order = Order::find($this->order_id);
        $presetProduct = PresetProduct::find($this->preset_product_id);

        if($this->type == TypeAlarm::USER_CREATED){
            return [
                '#{name}' => $user->name,
            ];
        }

        if($this->type == TypeAlarm::ORDER_SUCCESS){
            return [
                '#{name}' => $order->buyer_name,
                '#{merchant_uid}' => $order->merchant_uid,
                '#{format_products}' => $order->getFormatProducts($order->presetProducts),
                '#{url}' => "/orders/result?merchant_uid={$order->merchant_uid}&buyer_name={$order->buyer_name}&buyer_contact={$order->buyer_contact}",
            ];
        }

        if($this->type == TypeAlarm::PROTOTYPE_CREATED){
            return [
                '#{name}' => $prototype->presetProduct->preset->order->buyer_name,
                '#{path}' => '/prototypes?preset_product_uuid='.$prototype->presetProduct->uuid,
            ];
        }

        if($this->type == TypeAlarm::PRESET_PRODUCT_START_DELIVERY){
            $presetProducts = $presetProduct->preset->presetProducts()->where('delivery_number', $presetProduct->delivery_number)
                ->where('need_alert_delivery', 1)
                ->get();

            $presetProduct->preset->presetProducts()->where('delivery_number', $presetProduct->delivery_number)
                ->where('need_alert_delivery', 1)
                ->update(['need_alert_delivery' => 0]);

            return [
                '#{name}' => $presetProduct->preset->order->buyer_name,
                '#{name_product}' => $presetProduct->preset->order->getFormatProducts($presetProducts),
                '#{delivery_company}' => DeliveryCompany::getLabel($presetProduct->delivery_company),
                '#{delivery_number}' => $presetProduct->delivery_number,
                '#{url}' => str_replace('https://', '', $presetProduct->delivery_url),
            ];
        }

        if($this->type == TypeAlarm::PRESET_PRODUCT_DIRECT_DELIVERY_REQUIRED){
            return [
                '#{name}' => $presetProduct->preset->order->buyer_name,
            ];
        }

        if($this->type == TypeAlarm::PRESET_PRODUCT_PROTOTYPE_REQUIRED){
            return [
                '#{name}' => $presetProduct->preset->order->buyer_name,
                '#{mechant_uid}' => $presetProduct->preset->order->merchant_uid,
                '#{contact}' => $presetProduct->preset->order->buyer_contact,
                '#{name_product}' => $presetProduct->product->title,
                '#{path}' => '/admin/presetProducts/'.$presetProduct->id,
            ];
        }

        if($this->type == TypeAlarm::QNA_CREATED){
            $user = User::withTrashed()->find($qna->user_id);

            return [
                '#{name}' => $user->name,
                '#{title}' => $qna->title,
                '#{contact}' => $user->contact,
                '#{path]' => '/admin/qnas/create?id='.$qna->id,
            ];
        }

        if($this->type == TypeAlarm::QNA_ANSWERED){
            $user = User::withTrashed()->find($qna->user_id);

            return [
                '#{name}' => $user->name,
                '#{title}' => $qna->title,
                '#{contact}' => $user->contact,
                '#{path}' => '/admin/qnas/create?id='.$qna->id,
            ];
        }

        if($this->type == TypeAlarm::FEEDBACK_CREATED){
            $presetProduct = $feedback->presetProduct;
            $order = $presetProduct->preset->order;

            return [
                '#{name}' => $order->buyer_name,
                '#{merchant_uid}' => $order->merchant_uid,
                '#{contact}' => $order->buyer_contact,
                '#{name_product}' => $presetProduct->product->title,
                '#{path}' => '/admin/presetProducts/'.$presetProduct->id,
            ];
        }

        if($this->type == TypeAlarm::ESTIMATE_CREATED){
            return [
                '#{name}' => $estimate->name,
                '#{email}' => $estimate->email,
                '#{contact}' => $estimate->contact,
                '#{title}' => $estimate->title,
                '#{budget}' => $estimate->budget,
                '#{count}' => $estimate->count,
                '#{path}' => '/admin/estimates',
            ];
        }

        if($this->type == TypeAlarm::REVIEW_REQUIRED){
            return [
                '#{name}' => $presetProduct->preset->order->buyer_name,
            ];
        }

        if($this->type == TypeAlarm::ORDER_CREATED_BY_VBANK){
            return [
                '#{name}' => $order->buyer_name,
                '#{merchant_uid}' => $order->merchant_uid,
                '#{bank}' => $order->vbank_name,
                '#{account}' => $order->vbank_num,
                '#{price}' => number_format($order->price),
            ];
        }

        return [];
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function presetProduct(): BelongsTo
    {
        return $this->belongsTo(PresetProduct::class);
    }

    public function order(): BelongsTo
    {
        return $this->belongsTo(Order::class);
    }

    public function preset(): BelongsTo
    {
        return $this->belongsTo(Preset::class);
    }

    public function qna(): BelongsTo
    {
        return $this->belongsTo(Qna::class);
    }

    public function prototype(): BelongsTo
    {
        return $this->belongsTo(Prototype::class);
    }

    public function feedback(): BelongsTo
    {
        return $this->belongsTo(Feedback::class);
    }

    public function estimate(): BelongsTo
    {
        return $this->belongsTo(Estimate::class);
    }
}
