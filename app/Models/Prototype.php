<?php

namespace App\Models;

use App\Enums\StatePresetProduct;
use App\Enums\TypeAlarm;
use App\Enums\TypeDelivery;
use App\Mail\PrototypeCreated;
use App\Mail\PrototypeNeeded;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Mail;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Prototype extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;

    protected $guarded = ['id'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model){
            if($model->presetProduct->state == StatePresetProduct::READY || $model->presetProduct->state == StatePresetProduct::ONGOING_PROTOTYPE) {
                $model->presetProduct->update(['state' => StatePresetProduct::FINISH_PROTOTYPE]);

                // 시안을 주문단위로 묶어서 관리하고싶어하셔서 단체업데이트 필요
                $order = $model->presetProduct->preset->order;

                if($order)
                    $order->presetProducts()->update(['state' => StatePresetProduct::FINISH_PROTOTYPE]);
            }

            Alarm::create([
                'contact' => $model->presetProduct->preset->order->buyer_contact,
                'prototype_id' => $model->id,
                'type' => TypeAlarm::PROTOTYPE_CREATED,
            ]);

            $model->presetProduct->update(['alert_send_check_prototype_message_at' => Carbon::now()]);
            // Mail::to($model->presetProduct->preset->order->buyer_email)->send(new PrototypeCreated($model));
        });

        self::updated(function ($model){
            $prevConfirmed = $model->getOriginal('confirmed');

            if(!$prevConfirmed && $model->confirmed){
                // 퀵 & 방문수령은 시안 확정만 돼도 수령알림버튼 활성화 필요
                if($model->presetProduct->type_delivery != TypeDelivery::DELIVERY)
                    $model->presetProduct->update(['need_alert_delivery' => 1]);

                // 주문단위 묶음갱신
                $order = $model->presetProduct->preset->order;

                if($order)
                    $order->presetProducts()->update(['state' => StatePresetProduct::CONFIRM_PROTOTYPE]);
            }

            // Mail::to($model->presetProduct->preset->order->buyer_email)->send(new PrototypeCreated($model));
        });
    }

    public function getImgAttribute()
    {
        if($this->hasMedia('imgs')) {
            $media = $this->getMedia('imgs')[0];

            return [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function presetProduct()
    {
        return $this->belongsTo(PresetProduct::class);
    }

    public function comments()
    {
        return $this->hasMany(Comment::class);
    }
}
