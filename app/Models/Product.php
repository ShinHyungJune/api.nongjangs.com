<?php

namespace App\Models;

use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Enums\TypeProduct;
use App\Jobs\KeywordAlarmJob;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Product extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia, SoftDeletes;

    protected $guarded = ["id"];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updating(function ($model){
            if(!$model->product_id)
                $model->price = $model->price_origin - $model->price_discount;

            if(!$model->active) {
                $model->open = 0;
                $model->custom = 0;
            }
        });

        self::creating(function ($model){
            $prevModel = Product::orderBy("order", "asc")->where('product_id', null)->first();

            $model->order = $prevModel ? $prevModel->order - 1 : 1;
        });
    }

    public function categories()
    {
        return $this->belongsToMany(Category::class);
    }

    public function getImgAttribute()
    {
        $product = $this;

        if($product->product)
            $product = $this->product;

        if($product->hasMedia('imgs')) {
            $media = $product->getMedia('imgs')[0];

            return [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function getImgsPrototypeAttribute()
    {
        $medias = $this->getMedia("imgs_prototype");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function getImgsRealAttribute()
    {
        $medias = $this->getMedia("imgs_real");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function getImgsCircleAttribute()
    {
        $medias = $this->getMedia("imgs_circle");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function getCountReviewAttribute()
    {
        return $this->reviews()->count();
    }

    public function colors()
    {
        return $this->hasMany(Color::class);
    }

    public function sizes()
    {
        return $this->hasMany(Size::class);
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }

    // 할인률 표시 필요
    public function getRatioDiscountAttribute()
    {
        return floor($this->price_discount / $this->price_origin * 100);
    }

}
