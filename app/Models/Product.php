<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Product extends Model implements HasMedia
{
    protected $guarded = ['id'];

    use HasFactory, InteractsWithMedia;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updating(function ($model){

        });

        self::creating(function ($model){
            $model->uuid = Generator::createUuid($model, 10);
        });
    }

    public function getImgAttribute()
    {
        $product = $this;

        if($product->product)
            $product = $this->product;

        if($product->hasMedia('imgs')) {
            $media = $product->getMedia('imgs')[0];

            return [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function farm(): BelongsTo
    {
        return $this->belongsTo(Farm::class);
    }

    public function city(): BelongsTo
    {
        return $this->belongsTo(City::class);
    }

    public function county(): BelongsTo
    {
        return $this->belongsTo(County::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function getRatioDiscountAttribute()
    {
        return floor($this->price_discount / $this->price_origin * 100);
    }

    public function getAverageReviewAttribute()
    {
        return $this->reviews()->average('score');
    }

    public function getCountReviewAttribute()
    {
        return $this->reviews()->count();
    }

    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }

    public function options()
    {
        return $this->hasMany(Option::class);
    }

}
