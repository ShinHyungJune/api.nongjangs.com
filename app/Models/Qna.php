<?php

namespace App\Models;

use App\Enums\StateQna;
use App\Enums\TypeAlarm;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Qna extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;

    protected $guarded = ["id"];

    protected $casts = [
        'answered_at' => 'date',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model){
            /*Alarm::create([
                'type' => TypeAlarm::QNA_CREATED,
                'contact' => env('ADMIN_CONTACT', '01092106861'),
                'qna_id' => $model->id,
            ]);*/
        });

        self::updated(function ($model){
            /*$prevAnswer = $model->getOriginal('answer');
            $user = User::withTrashed()->find($model->user_id);

            if(!$prevAnswer && $model->answer){
                Alarm::create([
                    'type' => TypeAlarm::QNA_ANSWERED,
                    'contact' => $user->contact,
                    'qna_id' => $model->id,
                ]);
            }*/
        });
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /*public function getStateAttribute()
    {
        if($this->answer)
            return StateQna::FINISH;

        return StateQna::WAIT;
    }

    public function getFormatStateAttribute()
    {
        return StateQna::getLabel($this->state);
    }*/

    public function qnaCategory()
    {
        return $this->belongsTo(QnaCategory::class);
    }
}
