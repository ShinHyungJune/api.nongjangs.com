<?php

namespace App\Models;

use App\Enums\StateOutgoing;
use App\Enums\StatePresetProduct;
use App\Enums\StateRefund;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Refund extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;

    protected $guarded = ['id'];

    protected $casts = [

    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model){
            $model->presetProduct->update(['state' => StatePresetProduct::ONGOING_REFUND]);
        });

        self::updating(function ($model){
            $prevState = $model->getOriginal('state');

            if($prevState != StateRefund::SUCCESS && $model->state == StateRefund::SUCCESS) {
                $model->processed_at = Carbon::now();

                $model->presetProduct->update(['state' => StatePresetProduct::FINISH_REFUND]);
            }

            if($prevState != StateRefund::DENY && $model->state == StateRefund::DENY) {
                $model->processed_at = Carbon::now();

                $model->presetProduct->update(['state' => StatePresetProduct::DENY_REFUND]);
            }
        });
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function presetProduct(): BelongsTo
    {
        return $this->belongsTo(PresetProduct::class);
    }

    public function refunds()
    {
        return $this->hasMany(Refund::class);
    }
}
