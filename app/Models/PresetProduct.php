<?php

namespace App\Models;

use App\Enums\StatePresetProduct;
use App\Enums\TypeDiscount;
use App\Enums\TypeOption;
use App\Enums\TypePackage;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class PresetProduct extends Model
{
    use HasFactory;

    protected $table = "preset_product";
    protected $guarded = ['id'];
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function (PresetProduct $presetProduct) {
            $presetProduct = $presetProduct->calculatePrice();
        });

        self::updating(function (PresetProduct $presetProduct) {
            $presetProduct = $presetProduct->calculatePrice();
        });
    }

    public function preset(): BelongsTo
    {
        return $this->belongsTo(Preset::class);
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function package()
    {
        return $this->belongsTo(Package::class);
    }

    public function option(): BelongsTo
    {
        return $this->belongsTo(Option::class);
    }

    public function coupon(): BelongsTo
    {
        return $this->belongsTo(Coupon::class);
    }

    public function getCanReviewAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if($this->state != StatePresetProduct::CONFIRMED)
            return 0;

        if($this->review)
            return 0;

        return 1;
    }

    public function getCanVegetableStoryAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if($this->state != StatePresetProduct::CONFIRMED)
            return 0;

        return 1;
    }

    public function review()
    {
        return $this->hasOne(Review::class);
    }

    public function calculatePrice()
    {
        if($this->product){
            $total = 0;

            $option = $this->option;

            if($option->type == TypeOption::REQUIRED) {
                $price = $this->option_price + $this->product_price;

                $total += $price * $this->count;
            }

            if($option->type == TypeOption::ADDITIONAL) {
                $price = $this->option_price;

                $total += $price * $this->count;
            }

            $this->products_price = $total;

            $this->price = $total - $this->price_coupon;

            return $this;
        }

        if($this->package->type == TypePackage::SINGLE)
            $this->price = $this->package->price_single;

        if($this->package->type == TypePackage::BUNGLE)
            $this->price = $this->package->price_bungle;

        return $this;
    }

    public function calculatePriceCoupon(Coupon $coupon)
    {
        $couponGroup = $coupon->couponGroup;

        $priceDiscount = 0;

        if($couponGroup->type_discount == TypeDiscount::NUMBER)
            $priceDiscount = $couponGroup->value;

        if($couponGroup->type_discount == TypeDiscount::RATIO)
            $priceDiscount = floor($this->price / 100 * $coupon->value);

        if($couponGroup->max_price_discount < $priceDiscount)
            $priceDiscount = $couponGroup->max_price_discount;

        return $priceDiscount;
    }

    public function getFormatTitleAttribute()
    {
        if($this->product_id)
            return $this->product_title." "."({$this->option_title})";

        return TypePackage::getLabel($this->package_type)."꾸러미 ".$this->package_count."회차";
    }
}
