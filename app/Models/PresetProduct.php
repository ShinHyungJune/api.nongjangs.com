<?php

namespace App\Models;

use App\Enums\StateOrder;
use App\Enums\StatePackage;
use App\Enums\StatePresetProduct;
use App\Enums\TypeDiscount;
use App\Enums\TypeOption;
use App\Enums\TypePackage;
use App\Enums\TypePointHistory;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Facades\DB;

class PresetProduct extends Model
{
    use HasFactory;

    protected $table = "preset_product";
    protected $guarded = ['id'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function (PresetProduct $presetProduct) {
            $presetProduct = $presetProduct->calculatePrice();
        });

        self::updating(function (PresetProduct $presetProduct) {
            $presetProduct = $presetProduct->calculatePrice();
        });

        self::updated(function (PresetProduct $presetProduct) {
            $user = User::withTrashed()->find($presetProduct->preset->user_id);

            // 주문취소 시 반환처리
            $prevState = $presetProduct->getOriginal('state');

            if($prevState != StatePresetProduct::CANCEL && $presetProduct->state == StatePresetProduct::CANCEL){
                if($presetProduct->coupon)
                    $presetProduct->coupon->update(['use' => 0]);

                if($presetProduct->point && $user)
                    $user->givePoint($presetProduct->point, TypePointHistory::PRESET_PRODUCT_CANCLE, $presetProduct);

                $user->update([
                    'total_order_price' => $user->total_order_price - $presetProduct->price,
                    'total_order_count_package' => $presetProduct->package_id ? $user->total_order_count_package - 1 : $user->total_order_count_package,
                ]);
            }

            if($prevState != StatePresetProduct::CONFIRMED && $presetProduct->state == StatePresetProduct::CONFIRMED){
                if($user) {
                    $user->update([
                        'total_order_price' => $user->total_order_price + $presetProduct->price,
                        'total_order_count_package' => $presetProduct->package_id ? $user->total_order_count_package + 1 : $user->total_order_count_package,
                    ]);

                    if($user->grade) {
                        $point = floor($presetProduct->price * $user->grade->ratio_refund);

                        $user->givePoint($point, TypePointHistory::PRESET_PRODUCT_CONFIRM, $presetProduct);

                        // 등급업 처리 필요
                        $nextGrade = Grade::where('level', $user->grade->level + 1)->first();

                        // 다음 등급이 있고 && 등급업을 위한 조건들을 이미 충족했을 때
                        if ($nextGrade && ($user->count_package_for_next_grade <= 0 || $user->price_for_next_grade <= 0)) {
                            $user->update(['grade_id' => $nextGrade->id]);
                        }
                    }
                }

            }
        });
    }

    public function preset(): BelongsTo
    {
        return $this->belongsTo(Preset::class);
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function package()
    {
        return $this->belongsTo(Package::class);
    }

    public function option(): BelongsTo
    {
        return $this->belongsTo(Option::class);
    }

    public function coupon(): BelongsTo
    {
        return $this->belongsTo(Coupon::class);
    }

    public function getCanReviewAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if($this->state != StatePresetProduct::CONFIRMED)
            return 0;

        if($this->review)
            return 0;

        return 1;
    }

    public function getCanVegetableStoryAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if($this->state != StatePresetProduct::CONFIRMED)
            return 0;

        return 1;
    }

    public function canCreateVegetableStories()
    {

    }

    public function review()
    {
        return $this->hasOne(Review::class);
    }

    public function calculatePrice()
    {
        if($this->product){
            $total = 0;

            $option = $this->option;

            if($option->type == TypeOption::REQUIRED) {
                $price = $this->option_price + $this->product_price;

                $total += $price * $this->count;
            }

            if($option->type == TypeOption::ADDITIONAL) {
                $price = $this->option_price;

                $total += $price * $this->count;
            }

            $this->products_price = $total;

            $this->price = $total - $this->price_coupon - $this->point;

            return $this;
        }

        if($this->package){
            // 일단 초기는 이렇게 잡았는데 상품구성에 따라 가격 달라져야함
            if($this->package->type == TypePackage::SINGLE)
                $this->price = $this->package->price_single - $this->price_coupon - $this->point;

            if($this->package->type == TypePackage::BUNGLE)
                $this->price = $this->package->price_bungle - $this->price_coupon - $this->point;

            return $this;
        }

        return $this;
    }

    public function calculatePriceCoupon(Coupon $coupon)
    {
        $couponGroup = $coupon->couponGroup;

        $priceDiscount = 0;

        if($couponGroup->type_discount == TypeDiscount::NUMBER)
            $priceDiscount = $couponGroup->value;

        if($couponGroup->type_discount == TypeDiscount::RATIO)
            $priceDiscount = floor($this->price / 100 * $coupon->value);

        if($couponGroup->max_price_discount < $priceDiscount)
            $priceDiscount = $couponGroup->max_price_discount;

        return $priceDiscount;
    }

    public function getFormatTitleAttribute()
    {
        if($this->product_id)
            return $this->product_title." "."({$this->option_title})";

        return TypePackage::getLabel($this->package_type)."꾸러미 ".$this->package_count."회차";
    }

    public function packageChangeHistories()
    {
        return $this->hasMany(PackageChangeHistory::class);
    }

    public function materials()
    {
        return $this->belongsToMany(Material::class)->withPivot([
            'price',
            'price_origin',
            'unit',
            'count',
            'value',
            'type',
        ]);
    }

    public function syncMaterials($materials)
    {
        $package = $this->package;

        if(!$package)
            return ['success' => false, 'message' => '더 이상 구매할 수 없는 회차입니다.'];

        $priceTotal = 0;
        $priceMin = $this->package_type == TypePackage::BUNGLE ? $package->price_bungle : $package->price_single;

        foreach($materials as $materialData){
            $packageMaterial = $package->packageMaterials()->where('material_id', $materialData['id'])->first();

            if(!$packageMaterial)
                return ['success' => false, 'message' => '해당 회차에 소속된 품목만을 추가할 수 있습니다.'];

            $priceTotal += ($packageMaterial->count * $packageMaterial->price);
        }

        if($priceMin > $priceTotal)
            return ['success' => false, 'message' => '최소 금액을 충족하지 못했습니다.'];

        foreach($materials as $materialData){
            $packageMaterial = $package->packageMaterials()->where('material_id', $materialData['id'])->first();

            $prevMaterial = $this->materials()->where('materials.id', $packageMaterial->material_id)->first();

            // 기존 개수에만 추가
            if($prevMaterial){
                $this->materials()->updateExistingPivot($packageMaterial->material_id, [
                    'count' => $prevMaterial->pivot->count + 1,
                ]);
            }else{ // 새로 추가
                $this->materials()->attach($packageMaterial->material_id, [
                    'price' => $packageMaterial->price,
                    'price_origin' => $packageMaterial->price_origin,
                    'unit' => $packageMaterial->unit,
                    'value' => $packageMaterial->value,
                    'count' => $packageMaterial->count,
                    'type' => $packageMaterial->type,
                ]);
            }
        }

        return ['success' => true, 'message' => ''];
    }

    public function getCanLatePackageAttribute()
    {
        $user = User::withTrashed()->find($this->preset->user_id);

        $currentPackagePresetProduct = $user->getCurrentPackagePresetProduct();

        if(!$currentPackagePresetProduct)
            return null;

        if($currentPackagePresetProduct->state != StatePresetProduct::BEFORE_PAYMENT)
            return null;

        $nextPackage = Package::orderBy('count', 'asc')->where('count', '>', $currentPackagePresetProduct->package_count)->first();

        return $nextPackage;
    }

    public function getCanFastPackageAttribute()
    {
        $user = User::withTrashed()->find($this->preset->user_id);

        $currentPackagePresetProduct = $user->getCurrentPackagePresetProduct();

        if(!$currentPackagePresetProduct)
            return null;

        if($currentPackagePresetProduct->state != StatePresetProduct::BEFORE_PAYMENT)
            return null;

        $canOrderPackage = Package::getCanOrder();

        if($canOrderPackage->count < $currentPackagePresetProduct->package_count)
            return $canOrderPackage;

        return null;
    }

    public function getCanConfirmAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if($this->state == StatePresetProduct::DELIVERED)
            return 1;

        return 0;
    }

    public function getCanUpdateMaterialsAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        $package = $this->package;

        if(!$package)
            return 0;

        if($package->state != StatePackage::ONGOING_PACK)
            return 0;

        return 1;
    }

    public function getCanRequestCancelAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if(in_array($this->state, [
            StatePresetProduct::WILL_OUT,
            StatePresetProduct::ONGOING_DELIVERY,
            StatePresetProduct::DELIVERED,
        ])) {
            return 1;
        }

        return 0;
    }

    public function getCanCancelAttribute()
    {
        if(!auth()->user())
            return 0;

        if(auth()->user()->id != $this->preset->user_id)
            return 0;

        if(in_array($this->state, [
            StatePresetProduct::WILL_OUT,
            StatePresetProduct::ONGOING_DELIVERY,
            StatePresetProduct::DELIVERED,
            StatePresetProduct::CONFIRMED,
            StatePresetProduct::CANCEL,
            StatePresetProduct::REQUEST_CANCEL,
            StatePresetProduct::DENY_CANCEL,
        ])) {
            return 0;
        }

        return 1;
    }


    public function cancel()
    {
        $result = DB::transaction(function (){
            $user = User::withTrashed()->find($this->preset->user_id);

            if(config('app.env') != 'testing'){
                $accessToken = Iamport::getAccessToken();

                $result = Iamport::cancel($accessToken, $this->imp_uid, $this->price);

                if(!$result["response"])
                    return ["success" => false, "message" => $result["message"]];
            }

            // 취소처리
            $this->update(["state" => StatePresetProduct::CANCEL, 'cancel_at' => Carbon::now()]);

            return ["success" => true, "message" => "주문이 취소되었습니다."];
        });

        return $result;
    }

    public function changePackage($package)
    {
        $packageSetting = $this->preset->user->packageSetting;

        $this->update([
            'package_id' => $package->id,
            'package_name' => $packageSetting->name,
            'package_count' => $package->count,
            'package_will_delivery_at' => $package->will_delivery_at,
            'package_active' => $this->package_active,
            'package_type' => $this->package_type,
            'package_price' => $this->package_type == TypePackage::BUNGLE ? $package->price_bungle : $package->price_single,
        ]);
    }
}
