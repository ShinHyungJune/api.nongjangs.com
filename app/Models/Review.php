<?php

namespace App\Models;

use App\Enums\TypePointHistory;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Review extends Model implements HasMedia
{
    use HasFactory, InteractsWithMedia;


    protected $guarded = ['id'];

    public static $pointPhoto = 70;
    public static $pointText = 50;
    public static $pointBest = 200;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updated(function (Review $review) {
            $prevBest = $review->getOriginal('best');

            if(!$prevBest && $review->best && $review->user){
                $point = Review::$pointBest;

                $review->user->update(['point' => $point]);

                $review->user->pointHistories()->create([
                    'point_current' => $review->user->point,
                    'point' => $point,
                    'increase' => 1,
                    'type' => TypePointHistory::BEST_REVIEW_UPDATED,
                ]);
            }
        });
    }

    public function getImgAttribute()
    {
        if($this->hasMedia('imgs')) {
            $media = $this->getMedia('imgs')[0];

            return [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function getImgsAttribute()
    {
        $medias = $this->getMedia("imgs");

        $items = [];

        foreach($medias as $media){
            $items[] = [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return $items;
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }

    public function package()
    {
        return $this->belongsTo(Package::class);
    }

    public function presetProduct()
    {
        return $this->belongsTo(PresetProduct::class);
    }

    public function likes()
    {
        return $this->morphMany(Like::class, 'likeable');
    }

    public function bookmarks()
    {
        return $this->morphMany(Bookmark::class, 'bookmarkable');
    }

    public function getCountLikeAttribute()
    {
        return $this->likes()->count();
    }

    public function getCountBookmarkAttribute()
    {
        return $this->bookmarks()->count();
    }

    public function getFormatDisplayAttribute()
    {
        $presetProduct = $this->presetProduct;

        if($presetProduct){
            if($presetProduct->product_id)
                return $presetProduct->product_title;

            if($presetProduct->package_id)
                return "꾸러미 ".$presetProduct->package_count."회차";
        }

        return "";
    }
}
