<?php

namespace App\Models;

use App\Enums\StatePackage;
use App\Enums\TypePackageMaterial;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Package extends Model
{
    use HasFactory;

    protected $guarded = ['id'];

    protected $casts = [
        'will_delivery_at' => 'date',
        'start_pack_wait_at' => 'date',
        'finish_pack_wait_at' => 'date',
        'start_pack_at' => 'date',
        'finish_pack_at' => 'date',
        'start_delivery_ready_at' => 'date',
        'finish_delivery_ready_at' => 'date',
        'start_will_out_at' => 'date',
        'finish_will_out_at' => 'date',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function (Package $package) {
            $prev = Package::orderBy('count', 'desc')->first();

            $package->count = $prev ? $prev->count + 1 : 1;
        });
    }

    public function materials()
    {
        return $this->belongsToMany(Material::class, 'package_material')->withPivot([
            'type',
            'value',
            'count',
            'unit',
            'price_origin',
            'price'
        ]);
    }

    public function packageMaterials()
    {
        return $this->hasMany(PackageMaterial::class);
    }

    public function getPriceSingleAttribute()
    {
        return $this->packageMaterials()->where('type', TypePackageMaterial::SINGLE)->sum('price');
    }

    public function getPriceBungleAttribute()
    {
        return $this->packageMaterials()->where('type', TypePackageMaterial::BUNGLE)->sum('price');
    }

    public static function getOngoing()
    {
        return Package::where('start_pack_wait_at', '<=', Carbon::now())
            ->where('will_delivery_at', '>=', Carbon::now()->subDay()->startOfDay())
            ->orderBy('count', 'asc')
            ->first();
    }

    public static function getCanOrder()
    {
        $packages = Package::where('will_delivery_at', '>=', Carbon::now()->startOfDay())
            ->orderBy('count', 'asc')
            ->cursor();

        $findPackage = null;

        foreach($packages as $package){
            // 도착예정일 2일전 오전 9시까지만 신규접수 받음
            $date = Carbon::make($package->will_delivery_at)->subDays(2)->setHour(9)->setMinutes(0)->setSeconds(0);

            if(Carbon::now() <= $date){
                $findPackage = $package;

                break;
            }
        }

        return $findPackage;
    }

    public function recipes()
    {
        return $this->belongsToMany(Recipe::class);
    }

    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }

    public function getStateAttribute()
    {
        if($this->finish_pack_wait_at >= Carbon::now())
            return StatePackage::WAIT_PACK;

        if($this->finish_pack_at >= Carbon::now())
            return StatePackage::ONGOING_PACK;

        if($this->finish_delivery_ready_at >= Carbon::now())
            return StatePackage::DELIVERY_READY;

        return StatePackage::WILL_OUT;
    }

    public function presetProducts()
    {
        return $this->hasMany(PresetProduct::class);
    }
}
