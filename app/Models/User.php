<?php

namespace App\Models;

use App\Enums\SocialPlatform;
use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Models\임시\Product;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements HasMedia, JWTSubject
{
    use HasApiTokens, HasFactory, Notifiable, InteractsWithMedia;

    use SoftDeletes;

    protected $guarded = ["id"];

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key-value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    protected $appends = ["img"];

    public static $recommendPoint = 2000; // 추천 포인트

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($model){
            $grade = Grade::orderBy('min_price', 'asc')->first();

            if($grade)
                $model->grade_id = $grade->id;

            $model->code = Generator::createUuid($model, 8, 'code');
        });

        self::created(function ($model){
            $model->cart()->create();
        });

        self::updated(function ($model){

        });

        self::deleting(function ($model){

        });

        self::deleted(function ($model){

        });
    }

    public function registerMediaCollections():void
    {
        $this->addMediaCollection('img')->singleFile();
    }

    public function getImgAttribute()
    {
        if($this->hasMedia('img')) {
            $media = $this->getMedia('img')[0];

            return [
                "id" => $media->id,
                "name" => $media->file_name,
                "url" => $media->getFullUrl()
            ];
        }

        return null;
    }

    public function grade()
    {
        return $this->belongsTo(Grade::class);
    }

    public function cart()
    {
        return $this->hasOne(Cart::class);
    }

    public function socials()
    {
        return $this->hasMany(Social::class);
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }

    public function refunds()
    {
        return $this->hasMany(Refund::class);
    }

    public function getSocialAttribute()
    {
        if($this->social_platform == "google")
            return SocialPlatform::GOOGLE;

        if($this->social_platform == "apple")
            return SocialPlatform::APPLE;

        if($this->social_platform == "kakaoCustom")
            return SocialPlatform::KAKAO;

        if($this->social_platform == "naverCustom")
            return SocialPlatform::NAVER;

        return "";
    }

    public function qnas()
    {
        return $this->hasMany(Qna::class);
    }

    public function coupons()
    {
        return $this->hasMany(Coupon::class);
    }

    public function validCoupons()
    {
        return $this->coupons()
            ->where(function ($query){
                $query->where('order_id', null)
                    ->orWhereHas('order', function ($query){
                        $query->whereIn('state', [StateOrder::BEFORE_PAYMENT, StateOrder::CANCEL]);
                    });
            })
            ->where('will_finished_at', '>=', Carbon::now()->startOfDay());
    }

    public function getCountValidCouponAttribute()
    {
        return $this->validCoupons()->count();
    }

    public function presets()
    {
        return $this->hasMany(Preset::class);
    }

    public function presetProducts()
    {
        return $this->hasManyThrough(PresetProduct::class, Preset::class);
    }

    public function ongoingPresetProducts()
    {
        return $this->presetProducts()
            ->whereIn('state', [StatePresetProduct::READY, StatePresetProduct::ONGOING_PROTOTYPE, StatePresetProduct::FINISH_PROTOTYPE, StatePresetProduct::ONGOING_DELIVERY]);
    }

    public function getCountOngoingPresetProductAttribute()
    {
        return $this->ongoingPresetProducts()->count();
    }

    public function getFormatOngoingPresetProductsAttribute()
    {
        $ongoingPresetProducts = $this->ongoingPresetProducts;

        $result = "";

        if(count($ongoingPresetProducts) > 1)
            return $ongoingPresetProducts->first()->product_title." 외 " .($ongoingPresetProducts->count() - 1)."건";

        return $ongoingPresetProducts->count() > 0 ? $ongoingPresetProducts->first()->product_title : "";
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function deliveries()
    {
        return $this->hasMany(Delivery::class);
    }

    public function pointHistories()
    {
        return $this->hasMany(PointHistory::class);
    }

    public function couponHistories()
    {
        return $this->hasMany(CouponHistory::class);
    }

    public function likes()
    {
        return $this->hasMany(Like::class);
    }

    public function bookmarks()
    {
        return $this->hasMany(Bookmark::class);
    }
}
