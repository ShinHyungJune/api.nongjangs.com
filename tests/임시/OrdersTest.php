<?php


namespace Tests\임시;

use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Models\Coupon;
use App\Models\Order;
use App\Models\PayMethod;
use App\Models\Preset;
use App\Models\PresetProduct;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class OrdersTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;
    protected $payMethod;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->payMethod = PayMethod::factory()->create();

        $this->actingAs($this->user);

        $this->form = [
            'buyer_name' => "123",
            'buyer_contact' => "123",
            'buyer_address' => "123",
            'buyer_address_detail' => "123",
            'buyer_address_zipcode' => "123",

            'delivery_name' => "123",
            'delivery_contact' => "123",
            'delivery_address' => "123",
            'delivery_address_detail' => "123",
            'delivery_address_zipcode' => "123",

            'type_delivery' => \App\Enums\TypeDelivery::FREE,
            'point_use' => 0,
            'pay_method_id' => $this->payMethod->id,
        ];
    }

    public function attachProduct($preset, $product, $count = 1, $option = null)
    {
        $option = $option ?? \App\Models\Option::factory()->create();

        $preset->products()->attach($product->id, [
            'product_title' => $product->title,
            'product_price' => $product->price,
            'product_price_origin' => $product->price_origin,
            'count' => $count,
            'price' => $product->price,
            'option_id' => $option->id,
            'option_price' => $option->price,
            'option_type' => $option->type,
        ]);
    }

    /** @test */
    public function 데이터를_생성할_수_있다()
    {
        /*
type_product: 상품유형 (직거래, 꾸러미)

merchant_uid 생성해야함

preset_ids: [],

# 공통
// 배송지 정보 (다 nullable)
delivery_name 수취인명
delivery_contact 연락처
delivery_address
delivery_address_detail
delivery_address_zipcode
delivery_requirement nullable 배송요청사항

point_use default 0 사용한 마일리지

 * */
        $presets = \App\Models\Preset::factory()->count(2)->create([
            'user_id' => $this->user->id,
        ]);

        $this->form = [
            'presets' => [
                [
                    'id' => $presets->first()->id,
                    'count' => 1
                ],
                [
                    'id' => $presets->skip(1)->first()->id,
                    'count' => 2
                ],
            ]
        ];

        $this->json('post', '/api/orders', $this->form)->assertStatus(200);
    }

    /** @test */
    public function 꾸러미_상품이라면_현재_구매가능한_회차만_구매할_수_있다()
    {

    }


    /** @test */
    public function 도서산간불가상품이_포함될_경우_도서산간인_지역에_대하여_생성할_수_없다()
    {

    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_쿠폰은_사용처리된다()
    {
        /*
         * - **use를 1로 처리**
         - order에 연결
        - 쿠폰사용기록이 생성되어야함
         * */
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $coupon = Coupon::factory()->create(['user_id' => $this->user->id]);

        $coupon->update(['ratio_discount' => 10]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals($coupon->id, $order->coupon->id);

        $this->assertEquals(true, false);
    }

    /** @test */
    public function 주문이_생성되면_세트상품이_연결된다()
    {
        $presets = \App\Models\Preset::factory()->count(2)->create([
            'user_id' => $this->user->id,
        ]);

        $this->form = [
            'presets' => [
                [
                    'id' => $presets->first()->id,
                    'count' => 1
                ],
                [
                    'id' => $presets->skip(1)->first()->id,
                    'count' => 2
                ],
            ]
        ];

        $item = $this->json('post', '/api/orders', $this->form)->decodeResponseJson()['data'];

        $order = \App\Models\Order::find($item['id']);

        $this->assertEquals(count($presets), $order->presets()->count());
    }

    /** @test */
    public function 구매불가_상품세트를_포함할_수_없다()
    {
        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 0]);

        $this->attachProduct($preset, $product);

        $this->form = [
            'presets' => [
                [
                    'id' => $preset->id,
                    'count' => 1,
                ],
            ],
        ];

        $this->json('post', '/api/orders', $this->form)->assertStatus(403);
    }

    /** @test */
    public function 결제를_시도할_수_있다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);
    }

    /** @test */
    public function 사용할_포인트는_보유한_포인트만큼이_최대값이다()
    {
        $this->user->update(['point' => 1000]);

        $this->form['point_use'] = 2000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(403);
    }



    /** @test */
    public function 결제금액이_최소결제금액보다_작으면_결제할_수_없다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => \App\Models\Order::$minPrice - 1]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(403);
    }

    /** @test */
    public function 쿠폰을_사용할_수_있다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $coupon = Coupon::factory()->create(['user_id' => $this->user->id]);

        $coupon->update(['ratio_discount' => 10]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals($coupon->id, $order->coupon->id);
    }

    /** @test */
    public function 사용했거나_만료된_쿠폰은_사용할_수_없다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        // 사용쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => \App\Models\Order::factory()->create(['state' => \App\Enums\StateOrder::SUCCESS])->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(null, $order->coupon);

        // 만료쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $coupon->update(['will_finished_at' => Carbon::now()->subDay()]);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(null, $order->coupon);
    }

    /** @test */
    public function 주문구성에_맞게_결제금액이_계산된다()
    {
        /*        - 포인트
                - 쿠폰 (쿠폰은 최종결제가가 아니라 종합상품금액 기준으로 할인 들어가야함)
        - 상품수 * 상품가격
        - 추가상품수 * 추가상품가격*/

        // 1. 구독상품일 경우
        // 2. 직거래상품일 경우

        /*$this->user->update(['point' => 1000]);

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        // 사용쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $coupon->update(['ratio_discount' => 5]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 5000]);
        $size = \App\Models\Size::factory()->create(['price' => 1000]);
        $this->attachProduct($preset, $product, 3, null, $size);
        $this->attachProduct($preset, $product, 1, null, $size);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);
        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 7000]);
        $size = \App\Models\Size::factory()->create(['price' => 2000]);
        $this->attachProduct($preset, $product, 1, null, $size);

        $additionalProduct = \App\Models\Product::factory()->create([
            'product_id' => $product->id,
            'price' => 500
        ]);

        $this->attachProduct($preset, $additionalProduct, 1, null, $size);

        $this->form['coupon_id'] = $coupon->id;
        $this->form['point_use'] = 1000;

        $this->json('patch', '/api/orders/' . $order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(30875, $order->price);*/
    }


    // 보류
    public function 마일리지와_결제금액이_같다면_주문은_바로_성공처리된다()
    {

    }


    /** @test */
    public function 주문이_결제대기상태가_되면_사용자에게서_포인트_및_쿠폰내역_기록_및_장바구니에서_상품이_삭제된다()
    {
        /*
        - point가 0 초과일 때만 해당 작업
        - 포인트 사용기록 생성되어야함
         * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $presets = \App\Models\Preset::factory()->count(3)->create([
            'order_id' => $order->id,
            'cart_id' => \App\Models\Cart::factory()->create()->id,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());

        foreach ($presets as $preset) {
            $preset->refresh();

            $this->assertEquals(null, $preset->cart_id);
        }
    }

    /** @test */
    public function 주문이_성공상태가_되면_사용자에게서_포인트_및_쿠폰내역_및_장바구니에서_상품이_삭제되고_상품세트가_상품준비중_상태로_변경된다()
    {
        /*
        - point가 0 초과일 때만 해당 작업
        - 포인트 사용기록 생성되어야함
         * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
            'cart_id' => \App\Models\Cart::factory()->create()->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::BEFORE_PAYMENT,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());

        foreach ($presetProducts as $presetProduct) {
            $presetProduct->refresh();
            $this->assertEquals($presetProduct->state, \App\Enums\StatePresetProduct::READY);
            $this->assertEquals($presetProduct->cart_id, null);
        }
    }

    /** @test */
    public function 주문이_대기상태에서_성공상태가되면_중복으로_기록하지_않는다()
    {
        /*
        - point가 0 초과일 때만 해당 작업
        - 포인트 사용기록 생성되어야함
         * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::BEFORE_PAYMENT,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);
        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->user->refresh();

        $this->assertEquals(1, $this->user->pointHistories()->count());
        $this->assertEquals(1, $this->user->couponHistories()->count());
    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_장바구니에서_삭제된다()
    {
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());
    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_출고상품들은_주문취소예정금액이_계산된다()
    {
        // 배정된 적립금
        // 쿠폰
        // 구매금액
    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_사용자에게서_포인트를_차감한다()
    {
        /*- **point가 0 초과일 때만 해당 작업**
    - **포인트 사용기록 생성되어야함
        출고상품가격비율에 맞게 포인트가 배분되어야함 (단순히 n빵하면 값이 안맞으니까 반복문 돌려서 포인트 분배를 하되, 마지막 출고애한테는 남은 포인트 전부를 넘기는식으로 해야됨)
        배분하면서 presetProduct의 price도 갱신되어야함
        ***/
    }

    /** @test */
    public function 포인트는_오래된순부터_사용처리된다()
    {

    }

    /** @test */
    public function 주문이_성공상태가_되면_관련상품의_주문수가_갱신된다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $preset = \App\Models\Preset::factory()->create([
            'order_id' => $order->id
        ]);

        $product = \App\Models\Product::factory()->create();

        $this->attachProduct($preset, $product);

        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->assertEquals($product->count_order + 1, $product->refresh()->count_order);
    }

    /** @test */
    public function 자신의_결제준비상태를_제외한_목록을_조회할_수_있다()
    {
        $beforePaymentOrders = \App\Models\Order::factory()->count(3)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT
        ]);

        $successOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::SUCCESS
        ]);

        $waitOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::WAIT
        ]);

        $otherSuccessOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->other->id,
            'state' => \App\Enums\StateOrder::SUCCESS
        ]);

        $items = $this->json('get', '/api/orders', [])->decodeResponseJson()['data'];

        $this->assertEquals(count($successOrders) + count($waitOrders), count($items));
    }

    /** @test */
    public function 유형별_목록을_조회할_수_있다()
    {
        // has_column product_id, package_id
    }

    /** @test */
    public function 환불_및_취소내역여부별_목록을_조회할_수_있다()
    {
        // only_cancel
            // 1이면 취소요청 ~ 취소완료까지 다 가져오기
                // presetProduct도 이런 상태를 가진 애들만 가져오기
            // 0이면 취소관련 애들 빼고 가져오기
                // presetProduct도 취소관련된 애들 빼고 가져오기
    }

    /** @test */
    public function 시작일자로_목록을_조회할_수_있다()
    {
        $date = Carbon::now();

        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->addDay(),
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->subDays(2),
        ]);

        $items = $this->json('get', '/api/orders', [
            'started_at' => $date
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 종료일자로_목록을_조회할_수_있다()
    {
        $date = Carbon::now();

        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->subDay(),
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->addDay(),
        ]);

        $items = $this->json('get', '/api/orders', [
            'finished_at' => $date
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 상품명으로_목록을_조회할_수_있다()
    {
        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $word = "test";

        foreach ($includeOrders as $includeOrder) {
            $preset = \App\Models\Preset::factory()->create(['order_id' => $includeOrder->id]);

            $product = \App\Models\Product::factory()->create(['title' => $word]);

            $this->attachProduct($preset, $product);
        }

        $items = $this->json('get', '/api/orders', [
            'word' => $word
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 자신의_데이터를_조회할_수_있다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => StateOrder::SUCCESS,
        ]);

        $otherOrder = Order::factory()->create([
            'user_id' => $this->other->id,
            'state' => StateOrder::SUCCESS,
        ]);

        $this->json('get', '/api/orders/' . $order->id, [

        ])->assertStatus(200);

        $this->json('get', '/api/orders/' . $otherOrder->id, [

        ])->assertStatus(403);
    }


}
