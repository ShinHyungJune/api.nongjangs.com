<?php



use App\Enums\TypeBanner;
use App\Models\Banner;
use App\Models\Coupon;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class VegetableStoriesTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 사용자별_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 특정_태그들을_포함하는_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 키워드를_포함하는_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 상품별_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 패키지별_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 상품유형별_목록을_조회할_수_있다()
    {
        // type_product
    }

    /** @test */
    public function 좋아요순으로_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 등록순으로_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 사용자는_데이터를_생성할_수_있다()
    {
        /*imgs: []
preset_product_id (nullable)
description
recipe_id nullable
tag_ids

preset_product_id를 통해 package_id나 product_id가 자동설정되어야함*/
    }

    /** @test */
    public function 관련출고건이_있다면_자신의_출고건이고_구매확정된_출고건이어야만_데이터를_생성할_수_있다()
    {

    }

    /** @test */
    public function 데이터를_생성할때_특정_출고건에_대한_데이터라면_적립금이_부여된다()
    {
        /*1회 80원
2회 100원
3회 120원
적립할때마다 pointHistory 쌓여야함*/
    }

    /** @test */
    public function 자신의_데이터를_수정할_수_있다()
    {
        // preset_product_id는 수정불가주의
    }

    /** @test */
    public function 자신의_데이터를_삭제할_수_있다()
    {

    }
}
