<?php


use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Order;
use App\Models\Preset;
use App\Models\PayMethod;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class OrdersTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;
    protected $payMethod;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->payMethod = PayMethod::factory()->create();

        $this->actingAs($this->user);

        $this->form = [
            'buyer_name' => "123",
            'buyer_contact' => "123",
            'buyer_address' => "123",
            'buyer_address_detail' => "123",
            'buyer_address_zipcode' => "123",

            'delivery_name' => "123",
            'delivery_contact' => "123",
            'delivery_address' => "123",
            'delivery_address_detail' => "123",
            'delivery_address_zipcode' => "123",

            'type_delivery' => \App\Enums\TypeDelivery::DELIVERY,
            'point_use' => 0,
            'pay_method_id' => $this->payMethod->id,
        ];
    }

    public function attachProduct($preset, $product, $count = 1, $color = null, $size = null)
    {
        $size = $size ?? \App\Models\Size::factory()->create(['price' => 0]);
        $color = $color ?? \App\Models\Color::factory()->create();

        $preset->products()->attach($product->id, [
            'additional' => $product->product_id ? 1 : 0,
            'count' => $count,
            'price' => $product->price,
            'size_id' => $size->id,
            'size_price' => $size->price,
            'color_id' => $color->id,
        ]);
    }

    /** @test */
    public function 데이터를_생성할_수_있다()
    {
        /*
presets : [
	{
		id
		count
	}
],

 * */
        $presets = \App\Models\Preset::factory()->count(2)->create([
            'user_id' => $this->user->id,
        ]);

        $this->form = [
            'presets' => [
                [
                    'id' => $presets->first()->id,
                    'count' => 1
                ],
                [
                    'id' => $presets->skip(1)->first()->id,
                    'count' => 2
                ],
            ]
        ];

        $this->json('post', '/api/orders', $this->form)->assertStatus(200);
    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_쿠폰은_사용처리된다()
    {
        /*
         - order_id 연결
        - 쿠폰사용기록이 생성되어야함
         * */
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $coupon = Coupon::factory()->create(['user_id' => $this->user->id]);

        $coupon->update(['ratio_discount' => 10]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals($coupon->id, $order->coupon->id);
    }

    /** @test */
    public function 주문이_생성되면_세트상품이_연결된다()
    {
        $presets = \App\Models\Preset::factory()->count(2)->create([
            'user_id' => $this->user->id,
        ]);

        $this->form = [
            'presets' => [
                [
                    'id' => $presets->first()->id,
                    'count' => 1
                ],
                [
                    'id' => $presets->skip(1)->first()->id,
                    'count' => 2
                ],
            ]
        ];

        $item = $this->json('post', '/api/orders', $this->form)->decodeResponseJson()['data'];

        $order = \App\Models\Order::find($item['id']);

        $this->assertEquals(count($presets), $order->presets()->count());
    }

    /** @test */
    public function 구매불가_상품세트를_포함할_수_없다()
    {
        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 0]);

        $this->attachProduct($preset, $product);

        $this->form = [
            'presets' => [
                [
                    'id' => $preset->id,
                    'count' => 1,
                ],
            ],
        ];

        $this->json('post', '/api/orders', $this->form)->assertStatus(403);
    }

    /** @test */
    public function 결제를_시도할_수_있다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);
    }

    /** @test */
    public function 사용할_마일리지는_보유한_마일리지만큼이_최대값이다()
    {
        $this->user->update(['point' => 1000]);

        $this->form['point_use'] = 2000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(403);
    }

    /** @test */
    public function 결제금액이_최소결제금액보다_작으면_결제할_수_없다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => \App\Models\Order::$minPrice - 1]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(403);
    }

    /** @test */
    public function 쿠폰을_사용할_수_있다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $coupon = Coupon::factory()->create(['user_id' => $this->user->id]);

        $coupon->update(['ratio_discount' => 10]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals($coupon->id, $order->coupon->id);
    }

    /** @test */
    public function 사용했거나_만료된_쿠폰은_사용할_수_없다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        // 사용쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
            'order_id'=> \App\Models\Order::factory()->create(['state' => \App\Enums\StateOrder::SUCCESS])->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 10000]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $this->attachProduct($preset, $product);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(null, $order->coupon);

        // 만료쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $coupon->update(['will_finished_at' => Carbon::now()->subDay()]);

        $this->form['coupon_id'] = $coupon->id;

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(null, $order->coupon);
    }

    /** @test */
    public function 주문구성에_맞게_결제금액이_계산된다()
    {
/*        - 마일리지
        - 쿠폰 (쿠폰은 최종결제가가 아니라 종합상품금액 기준으로 할인 들어가야함)
- 상품수 * 상품가격
- 추가상품수 * 추가상품가격*/

        $this->user->update(['point' => 1000]);

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        // 사용쿠폰
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $coupon->update(['ratio_discount' => 5]);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 5000]);
        $size = \App\Models\Size::factory()->create(['price' => 1000]);
        $this->attachProduct($preset, $product, 3, null, $size);
        $this->attachProduct($preset, $product, 1, null, $size);

        $preset = \App\Models\Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);
        $product = \App\Models\Product::factory()->create(['open' => 1, 'price' => 7000]);
        $size = \App\Models\Size::factory()->create(['price' => 2000]);
        $this->attachProduct($preset, $product, 1, null, $size);

        $additionalProduct = \App\Models\Product::factory()->create([
            'product_id' => $product->id,
            'price' => 500
        ]);

        $this->attachProduct($preset, $additionalProduct, 1, null, $size);

        $this->form['coupon_id'] = $coupon->id;
        $this->form['point_use'] = 1000;

        $this->json('patch', '/api/orders/'.$order->id, $this->form)->assertStatus(200);

        $order->refresh();

        $this->assertEquals(30875, $order->price);
    }



    // 보류
    public function 마일리지와_결제금액이_같다면_주문은_바로_성공처리된다()
    {

    }



    /** @test */
    public function 주문이_결제대기상태가_되면_사용자에게서_포인트_및_쿠폰내역_기록_및_장바구니에서_상품이_삭제된다()
    {
/*
- point가 0 초과일 때만 해당 작업
- 포인트 사용기록 생성되어야함
 * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $presets = \App\Models\Preset::factory()->count(3)->create([
            'order_id' => $order->id,
            'cart_id' => \App\Models\Cart::factory()->create()->id,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());

        foreach($presets as $preset){
            $preset->refresh();

            $this->assertEquals(null, $preset->cart_id);
        }
    }

    /** @test */
    public function 주문이_성공상태가_되면_사용자에게서_포인트_및_쿠폰내역_및_장바구니에서_상품이_삭제되고_상품세트가_상품준비중_상태로_변경된다()
    {
        /*
        - point가 0 초과일 때만 해당 작업
        - 포인트 사용기록 생성되어야함
         * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
            'cart_id' => \App\Models\Cart::factory()->create()->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::BEFORE_PAYMENT,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());

        foreach($presetProducts as $presetProduct){
            $presetProduct->refresh();
            $this->assertEquals($presetProduct->state, \App\Enums\StatePresetProduct::READY);
            $this->assertEquals($presetProduct->cart_id, null);
        }
    }

    /** @test */
    public function 주문이_대기상태에서_성공상태가되면_중복으로_기록하지_않는다()
    {
        /*
        - point가 0 초과일 때만 해당 작업
        - 포인트 사용기록 생성되어야함
         * */
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::BEFORE_PAYMENT,
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);
        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->user->refresh();

        $this->assertEquals(1, $this->user->pointHistories()->count());
        $this->assertEquals(1, $this->user->couponHistories()->count());
    }

    /** @test */
    public function 주문이_결제대기_또는_성공상태가_되면_장바구니에서_삭제된다()
    {
        $point = 1000;

        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
            'point_use' => $point,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id
        ]);

        $prevUserPoint = $this->user->point;

        $order->update(['state' => \App\Enums\StateOrder::WAIT]);

        $this->user->refresh();

        $this->assertEquals($this->user->point, $prevUserPoint - $point);

        $pointHistory = $this->user->pointHistories()->first();

        $this->assertEquals($pointHistory->point, $point);
        $this->assertEquals($pointHistory->increase, 0);
        $this->assertEquals($pointHistory->point_current, $this->user->point);

        $couponHistory = $this->user->couponHistories()->first();

        $this->assertEquals($couponHistory->title, $coupon->title);
        $this->assertEquals($couponHistory->increase, 0);

        $this->assertEquals(0, $this->user->validCoupons()->count());
    }

    /** @test */
    public function 주문이_성공상태가_되면_관련상품의_주문수가_갱신된다()
    {
        $order = \App\Models\Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT,
        ]);

        $preset = \App\Models\Preset::factory()->create([
            'order_id' => $order->id
        ]);

        $product = \App\Models\Product::factory()->create();

        $this->attachProduct($preset, $product);

        $order->update(['state' => \App\Enums\StateOrder::SUCCESS]);

        $this->assertEquals($product->count_order + 1, $product->refresh()->count_order);
    }

    /** @test */
    public function 자신의_결제준비상태를_제외한_목록을_조회할_수_있다()
    {
        $beforePaymentOrders = \App\Models\Order::factory()->count(3)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::BEFORE_PAYMENT
        ]);

        $successOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::SUCCESS
        ]);

        $waitOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->user->id,
            'state' => \App\Enums\StateOrder::WAIT
        ]);

        $otherSuccessOrders = \App\Models\Order::factory()->count(2)->create([
            'user_id' => $this->other->id,
            'state' => \App\Enums\StateOrder::SUCCESS
        ]);

        $items = $this->json('get', '/api/orders', [])->decodeResponseJson()['data'];

        $this->assertEquals(count($successOrders) + count($waitOrders), count($items));
    }

    /** @test */
    public function 누구나_주문번호_및_연락처로_상세를_조회할_수_있다()
    {
        // 상품 시안 확인용으로 필요
        $order = \App\Models\Order::factory()->create(['state' => \App\Enums\StateOrder::SUCCESS]);

        $item = $this->json('get', '/api/orders/guest', [
            'contact' => $order->user_contact,
            'merchant_uid' => $order->merchant_uid,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($order->id, $item['id']);
    }

    /** @test */
    public function 시작일자로_목록을_조회할_수_있다()
    {
        $date = Carbon::now();

        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->addDay(),
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->subDays(2),
        ]);

        $items = $this->json('get', '/api/orders', [
            'started_at' => $date
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 종료일자로_목록을_조회할_수_있다()
    {
        $date = Carbon::now();

        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->subDay(),
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'created_at' => Carbon::make($date)->addDay(),
        ]);

        $items = $this->json('get', '/api/orders', [
            'finished_at' => $date
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 상품명으로_목록을_조회할_수_있다()
    {
        $includeOrders = Order::factory()->count(1)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $excludeOrders = Order::factory()->count(3)->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $word = "test";

        foreach($includeOrders as $includeOrder){
            $preset = \App\Models\Preset::factory()->create(['order_id' => $includeOrder->id]);

            $product = \App\Models\Product::factory()->create(['title' => $word]);

            $this->attachProduct($preset, $product);
        }

        $items = $this->json('get', '/api/orders', [
            'word' => $word
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeOrders), count($items));
    }

    /** @test */
    public function 자신의_데이터를_조회할_수_있다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => StateOrder::SUCCESS,
        ]);

        $otherOrder = Order::factory()->create([
            'user_id' => $this->other->id,
            'state' => StateOrder::SUCCESS,
        ]);

        $this->json('get', '/api/orders/'.$order->id, [

        ])->assertStatus(200);

        $this->json('get', '/api/orders/'.$otherOrder->id, [

        ])->assertStatus(403);
    }

    /** @test */
    public function 주문취소를_요청할_수_있다()
    {
        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(5)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::READY,
        ]);

        $item = $this->json('patch', '/api/orders/cancel/'.$order->id, [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(StateOrder::CANCEL, $item['state']);

        // 출고상품들 취소처리
        $presetProducts = $order->presetProducts;

        foreach($presetProducts as $presetProduct){
            $this->assertEquals(\App\Enums\StatePresetProduct::CANCEL, $presetProduct->refresh()->state);
        }
    }

    /** @test */
    public function 주문에서_취소가능여부를_조회할_수_있다()
    {
        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(5)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::READY,
        ]);

        $item = $this->json('get', '/api/orders/'.$order->id, [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(1, $item['can_cancel']);


        // 이미 상품 중 하나가 출고됨
        $order->presetProducts()->first()->update([
            'state' => StatePresetProduct::DELIVERED
        ]);

        $item = $this->json('get', '/api/orders/'.$order->id, [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(0, $item['can_cancel']);
    }

    /** @test */
    public function 취소가능여부_거짓이라면_취소를_요청할_수_없다()
    {
        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(5)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::READY,
        ]);

        // 이미 상품 중 하나가 출고됨
        $order->presetProducts()->first()->update([
            'state' => StatePresetProduct::DELIVERED
        ]);

        $item = $this->json('patch', '/api/orders/cancel/'.$order->id, [

        ])->assertStatus(403);
    }

    /** @test */
    public function 주문이_취소상태가_되면_관련_출고내역이_취소상태가_된다()
    {
        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'order_id' => $order->id,
        ]);

        $presetProducts = \App\Models\PresetProduct::factory()->count(5)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::READY,
        ]);

        $item = $this->json('patch', '/api/orders/cancel/'.$order->id, [

        ])->assertStatus(200);

        foreach($presetProducts as $presetProduct){
            $this->assertEquals(StatePresetProduct::CANCEL, $presetProduct->refresh()->state);
        }
    }

    /** @test */
    public function 주문이_취소상태가_되면_쿠폰은_미사용처리된다()
    {
        // - user_id가 있는 경우에만
        // - 쿠폰사용기록이 생성되어야함
        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
        ]);

        $coupon = Coupon::factory()->create([
            'order_id' => $order->id,
            'user_id' => $this->user->id,
        ]);

        $this->assertEquals(0, $this->user->validCoupons()->count());

        $item = $this->json('patch', '/api/orders/cancel/'.$order->id, [

        ])->assertStatus(200);

        $this->assertEquals(1, $this->user->validCoupons()->count());

        $this->assertEquals(1, $this->user->couponHistories()->where('type', \App\Enums\TypeCouponHistory::ORDER_CANCLED)->count());
    }

    /** @test */
    public function 주문이_취소상태가_되면_사용한_포인트는_반환된다()
    {
        // - user_id가 있는 경우에만
        // - 포인트기록이 생성되어야함

        $point = 1000;
        $prevUserPoint = $this->user->point;

        $order = Order::factory()->create([
            'state' => StateOrder::SUCCESS,
            'user_id' => $this->user->id,
            'point_use' => $point
        ]);

        $item = $this->json('patch', '/api/orders/cancel/'.$order->id, [

        ])->assertStatus(200);

        $this->assertEquals($prevUserPoint + $point, $this->user->refresh()->point);

        $this->assertEquals(1, $this->user->pointHistories()->where('type', \App\Enums\TypePointHistory::ORDER_CANCLED)->count());
    }
}
