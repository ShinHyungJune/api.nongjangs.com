<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class EventsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_목록을_조회할_수_있다()
    {
        $events = \App\Models\Event::factory()->count(5)->create();

        $items = $this->json('get', '/api/events')->decodeResponseJson()['data'];

        $this->assertEquals(count($events), count($items));
    }

    /** @test */
    public function 누구나_상세를_조회할_수_있다()
    {
        $event = \App\Models\Event::factory()->create();

        $item = $this->json('get', '/api/events/'.$event->id)->decodeResponseJson()['data'];

        $this->assertEquals($event->id, $item['id']);
    }

    /** @test */
    public function 상세를_조회하면_조회수가_갱신된다()
    {
        $event = \App\Models\Event::factory()->create();

        $item = $this->json('get', '/api/events/'.$event->id)->decodeResponseJson()['data'];

        $this->assertEquals($event->id, $item['id']);

        $this->assertEquals($event->count_view + 1, $item['count_view']);
    }

}
