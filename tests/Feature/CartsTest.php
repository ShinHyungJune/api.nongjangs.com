<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Preset;

class CartsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_자신의_장바구니에_담은_상품패키지_목록을_조회할_수_있다()
    {
        $myPresets = Preset::factory()->count(4)->create([
            'user_id' => $this->user->id,
            'cart_id' => $this->user->cart->id,
        ]);

        $otherPresets = Preset::factory()->count(5)->create([
            'user_id' => $this->other->id,
            'cart_id' => $this->other->cart->id,
        ]);

        $items = $this->json('get', '/api/carts')->decodeResponseJson()['data'];

        $this->assertEquals(count($myPresets), count($items));
    }

    /** @test */
    public function 누구나_자신의_장바구니에_담은_상품패키지_목록을_조회하면_상품패키지의_데이터가_현재상품내용으로_업데이트된다()
    {
        $preset = Preset::factory()->create([
            'user_id' => $this->user->id,
            'cart_id' => $this->user->cart->id,
        ]);

        $product = \App\Models\Product::factory()->create();

        $preset->products()->attach($product->id, [
            'price' => $product->price,
            'count' => 10,
            'size_id' => \App\Models\Size::factory()->create()->id,
            'color_id' => \App\Models\Color::factory()->create()->id,
        ]);

        $items = $this->json('get', '/api/carts')->decodeResponseJson()['data'];

        $preset = Preset::find($items[0]['id']);

        $this->assertEquals($product->price, $preset->products()->first()->price);

        // 상품 가격 수정
        $test = 999999999999999;

        $product->update(['price' => $test]);

        $items = $this->json('get', '/api/carts')->decodeResponseJson()['data'];

        $preset = Preset::find($items[0]['id']);

        $this->assertEquals($test, $preset->products()->first()->price);
    }

    /** @test */
    public function 누구나_장바구니에_상품패키지를_담을_수_있다()
    {
        // preset_id (preset이 누구건지 확인 필요)
        $preset = Preset::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $this->assertEquals(0, $this->user->cart->presets()->count());

        $this->json('post', '/api/carts', [
            'preset_id' => $preset->id
        ])->assertStatus(200);

        $this->assertEquals(1, $this->user->cart->presets()->count());

    }

    /** @test */
    public function 누구나_장바구니에_담긴_상품세트의_개수를_수정할_수_있다()
    {
        $preset = Preset::factory()->create([
            'count' => 99999,
            'cart_id' => $this->user->cart->id,
        ]);

        $count = 4;

        $this->json('patch', '/api/carts', [
            'preset_id' => $preset->id,
            'count' => $count,
        ])->assertStatus(200);

        $preset->refresh();

        $this->assertEquals($count, $preset->count);
    }

    /** @test */
    public function 누구나_장바구니에_담은_자신의_상품세트를_삭제할_수_있다()
    {
        $preset = \App\Models\Preset::factory()->create([
            'count' => 100,
            'user_id' => $this->user->id,
        ]);

        $this->json('delete', '/api/carts', [
            'preset_ids' => [$preset->id],
        ])->assertStatus(200);

        $this->assertEquals(0, $this->user->cart->presets()->count());
    }
}
