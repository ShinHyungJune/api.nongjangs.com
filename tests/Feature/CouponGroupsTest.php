<?php


use App\Enums\MomentCouponGroup;
use App\Enums\StateOrder;
use App\Enums\StateProduct;
use App\Enums\TargetCouponGroup;
use App\Enums\TypeCouponGroup;
use App\Enums\TypeDiscount;
use App\Enums\TypeExpire;
use App\Models\Coupon;
use App\Models\CouponGroup;
use App\Models\Grade;
use App\Models\Order;
use App\Models\Product;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CouponGroupsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected $grade;

    protected $couponGroups;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->createCouponGroups();

        $this->form = [

        ];
    }

    public function createCouponGroups()
    {
        $this->grade = Grade::factory()->create([
            'min_price' => 5000
        ]);

        $items = [
            [
                'title' => '개인정보입력 할인 쿠폰',
                'moment' => MomentCouponGroup::UPDATE_PROFILE,
                'type' => TypeCouponGroup::ALL,
                'target' => TargetCouponGroup::ALL,
                'type_discount' => TypeDiscount::NUMBER,
                'value' => 1000,
                'max_price_discount' => 1000,
                'min_price_order' => 1000,
                'type_expire' => TypeExpire::FROM_DOWNLOAD,
                'days' => 60,
            ],
            [ // 등급별로 각 등급 혜택금액에 맞게 넣어야함
                'title' => '등급쿠폰',
                'moment' => MomentCouponGroup::GRADE,
                'grade_id' => $this->grade->id,
                'type' => TypeCouponGroup::ALL,
                'target' => TargetCouponGroup::ALL,
                'type_discount' => TypeDiscount::NUMBER,
                'value' => 1000,
                'max_price_discount' => 0,
                'min_price_order' => 0,
                'type_expire' => TypeExpire::FROM_DOWNLOAD,
                'days' => 60,
            ],
            [
                'title' => '생일쿠폰',
                'moment' => MomentCouponGroup::BIRTHDAY,
                'type' => TypeCouponGroup::ALL,
                'target' => TargetCouponGroup::ALL,
                'type_discount' => TypeDiscount::NUMBER,
                'value' => 3000,
                'max_price_discount' => 3000,
                'min_price_order' => 3000,
                'type_expire' => TypeExpire::FROM_DOWNLOAD,
                'days' => 60,
            ],
            [
                'title' => '첫구매',
                'moment' => MomentCouponGroup::FIRST_ORDER,
                'type' => TypeCouponGroup::ALL,
                'target' => TargetCouponGroup::ALL,
                'type_discount' => TypeDiscount::NUMBER,
                'value' => 3000,
                'max_price_discount' => 3000,
                'min_price_order' => 3000,
                'type_expire' => TypeExpire::FROM_DOWNLOAD,
                'days' => 60,
            ],
        ];

        foreach($items as $item){
            CouponGroup::create($item);
        }
    }

    /** @test */
    public function 누구나_목록을_조회할_수_있다()
    {
        CouponGroup::truncate();
        /*moment가 null
type_expire가 from_download거나 specific이면 유효기간이 유효한 경우*/
        $includeModels = CouponGroup::factory()->count(5)->create([
            'moment' => null,
            'type_expire' => TypeExpire::FROM_DOWNLOAD,
            'type' => TypeCouponGroup::ALL,
        ]);

        $excludeModels = CouponGroup::factory()->count(3)->create([
            'moment' => MomentCouponGroup::BIRTHDAY,
            'type_expire' => TypeExpire::FROM_DOWNLOAD
        ]);

        $notOngoingModels = CouponGroup::factory()->count(3)->create([
            'moment' => null,
            'type_expire' => TypeExpire::SPECIFIC,
            'started_at' => Carbon::now()->subDays(3),
            'finished_at' => Carbon::now()->subDays(2),
        ]);

        $items = $this->json('get', '/api/couponGroups', [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeModels), count($items));
    }


    /** @test */
    public function 필요개인정보를_모두_입력하면_쿠폰이_발급된다()
    {
        // 최초 한번만 발행 (이미 발행받은적 있으면 발급안됨)
        $this->assertEquals(0, $this->user->coupons()->count());

        $this->user->update([
            'birth' => Carbon::now(),
            'count_family' => 10
        ]);

        $this->assertEquals(1, $this->user->coupons()->count());

        // 중복발급확인
        $this->user->update([
            'birth' => null,
            'count_family' => null
        ]);

        $this->user->update([
            'birth' => Carbon::now(),
            'count_family' => 10
        ]);

        $this->assertEquals(1, $this->user->coupons()->count());

    }

    /** @test */
    public function 등급이_갱신되면_해당_등급에_해당하는_쿠폰이_발급된다()
    {
        // 등급 update될 때 처리
        // 최초 한번만 발행 (이미 발행받은적 있으면 발급안됨)
        $this->assertEquals(0, $this->user->coupons()->count());

        $this->user->update(['grade_id' => $this->grade->id]);

        $this->assertEquals(1, $this->user->coupons()->count());
    }

    /** @test */
    public function 생일체크를_했을_때_생일이라면_쿠폰이_발급된다()
    {
        // 스케줄 체크로 매일 9시에 체크하되, 1년내에 받았으면 발급하지 않기 (생일 바꿔대는거 방지)
        // 받은일자로부터 1년 뒤보다 날짜가 적은 애들은 무시해버리기
        $this->assertEquals(0, $this->user->coupons()->count());
        $this->user->update(['birth' => Carbon::now()]);

        // 오늘이 생일인 경우
        $this->artisan('check:birthday');
        $this->assertEquals(1, $this->user->coupons()->count());

        // 또 생일이지만 1년 지나기전에 이미 쿠폰 받은 경우
        $this->artisan('check:birthday');
        $this->assertEquals(1, $this->user->coupons()->count());

        $recover = Carbon::now();

        // 또 생일이지만 1년 지난 경우
        Carbon::setTestNow(Carbon::now()->addYear());
        $this->artisan('check:birthday');
        $this->assertEquals(2, $this->user->coupons()->count());

        // 오늘이 생일이 아닌 경우
        Carbon::setTestNow(Carbon::now());
        Coupon::truncate();
        $this->user->update(['birth' => Carbon::now()->subDay()]);
        $this->artisan('check:birthday');
        $this->assertEquals(0, $this->user->coupons()->count());

        Carbon::setTestNow(null);

    }

    /** @test */
    public function 첫구매를_하면_쿠폰이_발급된다()
    {
        $this->assertEquals(0, $this->user->coupons()->count());

        $order = Order::factory()->create(['user_id' => $this->user->id]);

        $order->update(['state' => StateOrder::SUCCESS]);

        $this->assertEquals(1, $this->user->coupons()->count());
    }

    /** @test */
    public function 특정_사용자를_대상하는_쿠폰그룹은_사용자가_연결되면_해당_사용자에게_바로_쿠폰이_생성된다()
    {
        $this->assertEquals(0, $this->user->coupons()->count());

        $couponGroup = CouponGroup::factory()->create([
            'type' => TypeCouponGroup::ALL,
            'target' => TargetCouponGroup::PERSONAL
        ]);

        $couponGroup->users()->attach($this->user->id);

        $this->assertEquals(1, $this->user->coupons()->count());
    }

    /** @test */
    public function 다운_가능한_목록을_조회할_수_있다()
    {
        $notDownloadCouponGroups = CouponGroup::factory()->count(5)->create();
        $alreadyDownloadCouponGroups = CouponGroup::factory()->count(3)->create();

        foreach($alreadyDownloadCouponGroups as $couponGroup){
            Coupon::factory()->create([
                'coupon_group_id' => $couponGroup->id,
                'user_id' => $this->user->id
            ]);
        }

        $items = $this->json('get', '/api/couponGroups', [
            'can_download' => 1
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($notDownloadCouponGroups), count($items));
    }

    /** @test */
    public function 할인값순으로_목록을_조회할_수_있다()
    {
        $secondItem = \App\Models\CouponGroup::factory()->create([
            'value' => 2,
        ]);
        $firstItem = \App\Models\CouponGroup::factory()->create([
            'value' => 3,
        ]);
        $thirdItem = \App\Models\CouponGroup::factory()->create([
            'value' => 1,
        ]);

        $items = $this->json('get', '/api/couponGroups', [
            'order_by' => 'value',
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem){
                $this->assertTrue($item['value'] < $prevItem['value']);
            }
            $prevItem = $item;
        }
    }

    /** @test */
    public function 등록순으로_목록을_조회할_수_있다()
    {
        $secondItem = \App\Models\CouponGroup::factory()->create([
            'created_at' => Carbon::now()->subDays(2),
        ]);
        $firstItem = \App\Models\CouponGroup::factory()->create([
            'created_at' => Carbon::now()->subDays(1),
        ]);
        $thirdItem = \App\Models\CouponGroup::factory()->create([
            'created_at' => Carbon::now()->subDays(3),
        ]);

        $items = $this->json('get', '/api/couponGroups', [
            'order_by' => 'created_at',
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem){
                $this->assertTrue($item['format_created_at'] < $prevItem['format_created_at']);
            }
            $prevItem = $item;
        }
    }
}
