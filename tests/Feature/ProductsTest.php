<?php


namespace Tests\Feature;

use App\Models\Banner;
use App\Models\Category;
use App\Models\Coupon;
use App\Models\Product;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_공개_및_추가상품이_아닌_목록을_조회할_수_있다()
    {
        // 비공개상품은 목록에 포함 안되게 확인
        $products = Product::factory()->count(5)->create(['open' => 1]);
        $additionalProducts = Product::factory()->count(5)->create(['open' => 1, 'product_id' => $products->first()->id]);
        $secretProducts = Product::factory()->count(5)->create(['open' => 0]);

        $items = $this->json('get', '/api/products', [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($products), count($items));
    }

    /** @test */
    public function 카테고리별_목록을_조회할_수_있다()
    {
        // 비공개상품은 목록에 포함 안되게 확인
        $aCategory = Category::factory()->create();
        $bCategory = Category::factory()->create();

        $aCategoryProducts = Product::factory()->count(5)->create(['category_id' => $aCategory->id]);
        $bCategoryProducts = Product::factory()->count(3)->create(['category_id' => $bCategory->id]);

        $items = $this->json('get', '/api/products', [
            'category_id' => $aCategory->id,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($aCategoryProducts), count($items));
    }

    public function 랜덤순으로_목록을_조회할_수_있다()
    {

    }

    /** @test */
    public function 추천_목록을_조회할_수_있다()
    {
        $recommendProducts = Product::factory()->count(5)->create(['recommend' => 1]);
        $unRecommendProducts = Product::factory()->count(3)->create(['recommend' => 0]);

        $items = $this->json('get', '/api/products', [
            'recommend' => 1,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($recommendProducts), count($items));
    }

    /** @test */
    public function 구매수순으로_목록을_조회할_수_있다()
    {
        $firstItem = Product::factory()->create([
            'count_order' => 10
        ]);

        $thirdItem = Product::factory()->create([
            'count_order' => 0
        ]);

        $secondItem = Product::factory()->create([
            'count_order' => 7
        ]);

        $items = $this->json('get', '/api/products', [
            'order_by' => 'count_order',
            'align' => 'desc'
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem)
                $this->assertTrue($prevItem['count_order'] > $item['count_order']);

            $prevItem = $item;
        }
    }

    /** @test */
    public function 생성순으로_목록을_조회할_수_있다()
    {
        $firstItem = Product::factory()->create([
            'created_at' => Carbon::now()
        ]);

        $thirdItem = Product::factory()->create([
            'created_at' => Carbon::now()->subDays(10),
        ]);

        $secondItem = Product::factory()->create([
            'created_at' => Carbon::now()->subDays(5),
        ]);

        $items = $this->json('get', '/api/products', [
            'order_by' => 'created_at',
            'align' => 'desc'
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem)
                $this->assertTrue($prevItem['format_created_at'] > $item['format_created_at']);

            $prevItem = $item;
        }
    }

    /** @test */
    public function 낮은가격순으로_목록을_조회할_수_있다()
    {
        $firstItem = Product::factory()->create([
            'price' => 1000
        ]);

        $thirdItem = Product::factory()->create([
            'price' => 100
        ]);

        $secondItem = Product::factory()->create([
            'price' => 500
        ]);

        $items = $this->json('get', '/api/products', [
            'order_by' => 'price',
            'align' => 'asc'
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem) {
                $this->assertTrue($prevItem['price'] < $item['price']);
            }
            $prevItem = $item;
        }
    }

    /** @test */
    public function 높은가격순으로_목록을_조회할_수_있다()
    {
        $firstItem = Product::factory()->create([
            'price' => 1000
        ]);

        $thirdItem = Product::factory()->create([
            'price' => 100
        ]);

        $secondItem = Product::factory()->create([
            'price' => 500
        ]);

        $items = $this->json('get', '/api/products', [
            'order_by' => 'price',
            'align' => 'desc'
        ])->decodeResponseJson()['data'];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem) {
                $this->assertTrue($prevItem['price'] > $item['price']);
            }
            $prevItem = $item;
        }
    }

    /** @test */
    public function 최소금액으로_목록을_조회할_수_있다()
    {
        $price = 10000;

        $includeProducts = Product::factory()->count(5)->create([
            'price' => $price,
        ]);

        $excludeProducts = Product::factory()->count(3)->create([
            'price' => $price - 5000,
        ]);

        $items = $this->json('get', '/api/products', [
            'price_min' => $price,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeProducts), count($items));
    }

    /** @test */
    public function 최대금액으로_목록을_조회할_수_있다()
    {
        $price = 10000;

        $includeProducts = Product::factory()->count(5)->create([
            'price' => $price,
        ]);

        $excludeProducts = Product::factory()->count(3)->create([
            'price' => $price + 5000,
        ]);

        $items = $this->json('get', '/api/products', [
            'price_max' => $price,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includeProducts), count($items));
    }

}
