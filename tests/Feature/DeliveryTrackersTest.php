<?php


namespace Tests\Feature;

use App\Enums\DeliveryCompany;
use App\Enums\StatePresetProduct;
use App\Enums\TypeBanner;
use App\Jobs\CheckDeliveryStateJob;
use App\Models\Banner;
use App\Models\Coupon;
use App\Models\DeliveryTracker;
use App\Models\PresetProduct;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

class DeliveryTrackersTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;
    protected $deliveryTracker;
    protected $deliveryNumber;
    protected $deliveryCompanyId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->deliveryTracker = new DeliveryTracker();
        $this->deliveryNumber = "6096384642253";
        $this->deliveryCompanyId = DeliveryCompany::getId(DeliveryCompany::POST);

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 배송추적_등록을_할_수_있다()
    {
        $presetProduct = PresetProduct::factory()->create();

        $result = $this->deliveryTracker->monitor($this->deliveryCompanyId, $this->deliveryNumber, $presetProduct->getDeliveryTrackerCallbackUrl());

        $this->assertEquals(1, $result['success']);
    }


    /** @test */
    public function 배송상태를_조회할_수_있다()
    {
        $result = $this->deliveryTracker->track($this->deliveryCompanyId, $this->deliveryNumber);

        $this->assertEquals(1, $result['success']);
    }

    /** @test */
    public function 출고의_배송추적을_요청하면_배송상태가_갱신된다()
    {
        $presetProduct = PresetProduct::factory()->create([
            'state' => StatePresetProduct::ONGOING_DELIVERY,
            'delivery_number' => $this->deliveryNumber,
            'delivery_company' => DeliveryCompany::POST,
        ]);

        $this->json('get','/api/presetProducts/delivery/'.$presetProduct->id);

        $this->assertEquals(StatePresetProduct::DELIVERED, $presetProduct->refresh()->state);
    }
}
