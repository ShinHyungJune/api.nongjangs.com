<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PhrasesTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_목록을_조회할_수_있다()
    {
        $phrases = \App\Models\Phrase::factory()->count(5)->create();

        $items = $this->json('get', '/api/phrases', [])->decodeResponseJson()['data'];

        $this->assertEquals(count($phrases), count($items));
    }

    /** @test */
    public function 카테고리별_목록을_조회할_수_있다()
    {
        $a = \App\Models\PhraseProductCategory::factory()->create();
        $b = \App\Models\PhraseProductCategory::factory()->create();

        $aPhrases = \App\Models\Phrase::factory()->count(5)->create();
        $bPhrases = \App\Models\Phrase::factory()->count(3)->create([
            'phrase_product_category_id' => $b->id,
        ]);

        $items = $this->json('get', '/api/phrases', [
            'phrase_product_category_id' => $b->id,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($bPhrases), count($items));
    }

    /** @test */
    public function 검색어로_목록을_조회할_수_있다()
    {
        $word = '123';

        $includePhrases = \App\Models\Phrase::factory()->count(5)->create([
            'description' => $word
        ]);
        $excludePhrases = \App\Models\Phrase::factory()->count(3)->create([
            'description' => '5555'
        ]);

        $items = $this->json('get', '/api/phrases', [
            'word' => $word,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($includePhrases), count($items));
    }
}
