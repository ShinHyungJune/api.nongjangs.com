<?php


use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Enums\TypeDiscount;
use App\Enums\TypeOption;
use App\Models\Count;
use App\Models\Coupon;
use App\Models\CouponGroup;
use App\Models\Option;
use App\Models\Order;
use App\Models\Preset;
use App\Models\PresetProduct;
use App\Models\Product;
use App\Models\User;
use Database\Factories\OptionFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PresetsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 사용자는_데이터를_생성할_수_있다()
    {
        /*[
            {
                id: "",
                count: "",
            }
        ]*/
        $requiredOption = Option::factory()->create([
            'type' => TypeOption::REQUIRED,
            'count' => 1000,
        ]);

        $additionalOptions = Option::factory()->count(3)->create([
            'type' => TypeOption::ADDITIONAL,
            'count' => 1000,
        ]);

        $countRequired = 3;
        $countAdditional = 2;

        $this->form = [
            'options' => [
                [
                    'id' => $requiredOption->id,
                    'count' => $countRequired
                ]
            ]
        ];

        foreach($additionalOptions as $option){
            $this->form['options'][] = [
                'id' => $option->id,
                'count' => $countAdditional
            ];
        }

        $item = $this->json('post', '/api/presets', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals($countRequired, $item['count_option_required']);
        $this->assertEquals($countAdditional * count($additionalOptions), $item['count_option_additional']);
    }

    /** @test */
    public function 재고보다_더_많이_생성할_수_없다()
    {
        // 반복문으로 옵션과 상품의 재고를 확인하고 forBidden으로 무슨 상품 재고가 털렸는지 뿌려주기
        $count = 3;

        $option = Option::factory()->create(['count' => $count]);

        $this->form['options'] = [
            [
                'id' => $option->id,
                'count' => $count + 1
            ]
        ];


        $this->json('post', '/api/presets', $this->form)->assertStatus(403);
    }

    /** @test */
    public function 데이터를_생성하면_비용이_갱신된다()
    {
/*# calculate
        - price 최총 금액
    - price_total 상품 총 금액
    - price_discount 할인금액
    - price_delivery 배송비
    - count_option_required
    - count_option_additional

# 배송비 계산
    - type_delivery가 FREE라면
    - price_delivery = 0
        - type_delivery가 EACH라면
    - type_delivery_price가 STATIC이라면
    - price_delivery = price_delivery
        - type_delivery가 CONDITIONAL이라면
    - min_price_for_free_delivery_price <= price?
        - 참이라면 무료
        - 거짓이라면 price_delivery
    - type_delivery가 PRICE_BY_COUNT라면
    -  prices_delivery 배열을 순차조회하면서 상품조합의 필수옵션 선택한 상품의 개수가 n개 이상인 구간 찾기 (그 구간의 price가 배송비)
	-> 도서산간이면 delivery_price_far_place 추가해야함

# 쿠폰
최종가 기준으로 쿠폰 적용되어야함*/
        $product = Product::factory()->create([
            'price'=> 1000
        ]);

        $requiredOption = Option::factory()->create([
            'product_id' => $product->id,
            'type' => TypeOption::REQUIRED,
            'price' => 1000,
            'count' => 1000,
        ]);

        $additionalOptions = Option::factory()->count(3)->create([
            'product_id' => $product->id,
            'type' => TypeOption::ADDITIONAL,
            'price' => 500,
            'count' => 1000,
        ]);

        $countRequired = 3;
        $countAdditional = 2;

        $this->form = [
            'options' => [
                [
                    'id' => $requiredOption->id,
                    'count' => $countRequired
                ]
            ]
        ];

        foreach($additionalOptions as $option){
            $this->form['options'][] = [
                'id' => $option->id,
                'count' => $countAdditional
            ];
        }

        $item = $this->json('post', '/api/presets', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals(9000, $item['price']);
    }
    /** @test */
    public function 사용자는_자신의_데이터를_수정할_수_있다()
    {
        /*[
            {
                option_id: "",
                count: "",
            }
        ]*/

        $requiredOption = Option::factory()->create([
            'type' => TypeOption::REQUIRED,
            'count' => 10000,
        ]);

        $additionalOptions = Option::factory()->count(3)->create([
            'type' => TypeOption::ADDITIONAL,
            'count' => 10000,
        ]);

        $countRequired = 3;
        $countAdditional = 2;

        $this->form = [
            'options' => [
                [
                    'id' => $requiredOption->id,
                    'count' => $countRequired
                ]
            ]
        ];

        foreach($additionalOptions as $option){
            $this->form['options'][] = [
                'id' => $option->id,
                'count' => $countAdditional
            ];
        }

        $item = $this->json('post', '/api/presets', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals($countRequired, $item['count_option_required']);
        $this->assertEquals($countAdditional * count($additionalOptions), $item['count_option_additional']);
    }


    /** @test */
    public function 쿠폰을_적용할_수_있다()
    {
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(200);
    }

    /** @test */
    public function 현재_주문_가능한_상품조합의_상품일_경우에만_쿠폰을_적용할_수_있다()
    {
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        // 남의거
        $preset = Preset::factory()->create([
            'user_id' => $this->other->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(403);

        // 이미 주문 완료
        $preset = Preset::factory()->create([
            'user_id' => $this->user->id,
            'order_id' => Order::factory()->create(['state' => StateOrder::SUCCESS])
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(403);
    }

    /** @test */
    public function 자신의_쿠폰이_아니면_적용할_수_없다()
    {
        $coupon = Coupon::factory()->create([
            'user_id' => $this->other->id,
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(403);
    }

    /** @test */
    public function 이미_사용한_쿠폰은_적용할_수_없다()
    {
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
            'use' => 1,
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(403);
    }

    /** @test */
    public function 쿠폰사용불가_상품에는_쿠폰을_적용할_수_없다()
    {
        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'product_id' => Product::factory()->create([
                'can_use_coupon' => 0
            ])->id,
        ]);

        $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->assertStatus(403);
    }

    /** @test */
    public function 쿠폰을_적용하면_상품조합의_비용과_쿠폰적용금액이_갱신된다()
    {
        $couponGroup = CouponGroup::factory()->create([
            'type_discount' => TypeDiscount::NUMBER,
            'value' => 1000,
            'max_price_discount' => 700
        ]);

        $coupon = Coupon::factory()->create([
            'user_id' => $this->user->id,
            'coupon_group_id' => $couponGroup->id,
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);

        $item = $this->json('patch', '/api/presets/coupon/'.$preset->id, [
            'coupon_id' => $coupon->id,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(700, $item['price_coupon']);
        $this->assertEquals($item['price_total'], $item['price'] + $item['price_delivery'] - $item['price_coupon']);
    }

    /** @test */
    public function 취소완료_상태가_되면_쿠폰은_미사용_처리된다()
    {
        $coupon = Coupon::factory()->create(['use' => 1]);

        $order = Order::factory()->create([
            'user_id' => $this->user->id,
            'state' => StateOrder::WAIT
        ]);

        $preset = Preset::factory()->create([
            'user_id' => $this->user->id,
            'coupon_id' => $coupon->id,
            'order_id' => $order->id
        ]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::READY,
        ]);

        $order->update(['state' => StateOrder::CANCEL]);

        $this->assertEquals(0, $coupon->refresh()->use);
    }
}
