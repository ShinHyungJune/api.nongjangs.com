<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Order;
use App\Models\User;
use App\Models\Preset;
use App\Enums\DeliveryCompany;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Enums\StatePresetProduct;

class PresetsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $product;
    protected $additionalProducts;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->products = \App\Models\Product::factory()->count(2)->create();

        foreach($this->products as $product){
            \App\Models\Color::factory()->count(3)->create(['product_id' => $product->id]);
            \App\Models\Size::factory()->count(3)->create(['product_id' => $product->id]);
            \App\Models\Product::factory()->count(3)->create(['product_id' => $product->id]);
        }

        $this->form = [
            'products' => [],
            'additionalProducts' => []
        ];

        foreach($this->products as $product){
            $this->form['products'][] = [
                'id' => $product->id,
                'size_id' => $product->sizes()->inRandomOrder()->first()->id,
                'color_id' => $product->colors()->inRandomOrder()->first()->id,
                'count' => 1,
            ];

            $this->form['additionalProducts'][] = [
                'id' => $product->products()->inRandomOrder()->first()->id,
                'count' => 1,
            ];
        }
    }

    /** @test */
    public function 누구나_상품패키지를_생성할_수_있다()
    {
/*        products : [
        [
            id
            size_id
            color_id
            count
            ],
        ]
        additionalProducts: [
            {
                id
                count
            }
        ]*/
        $this->json('post', '/api/presets', $this->form)->assertStatus(200);
    }


    /** @test */
    public function 패키지를_생성하면_고른_상품패키지와_추가상품에_맞게_데이터가_연결된다()
    {
        $product = \App\Models\Product::factory()->create();

        $color = \App\Models\Color::factory()->create(['product_id' => $product->id]);
        $size = \App\Models\Size::factory()->create(['product_id' => $product->id]);

        $additionalProduct = \App\Models\Product::factory()->create([
            'product_id' => $product->id,
        ]);

        $this->form = [
            'products' => [
                [
                    'id' => $product->id,
                    'size_id' => $size->id,
                    'color_id' => $color->id,
                    'count' => 2,
                ],
                [
                    'id' => $product->id,
                    'size_id' => $size->id,
                    'color_id' => $color->id,
                    'count' => 1,
                ]
            ],

            'additionalProducts' => [
                [
                    'id' => $additionalProduct->id,
                    'count' => 3,
                ]
            ]
        ];

        $item = $this->json('post', '/api/presets', $this->form)->decodeResponseJson()['data'];

        $preset = Preset::find($item['id']);

        $this->assertEquals(2, $preset->products()->wherePivot('additional', 0)->count());
        $this->assertEquals(2, $preset->products()->wherePivot('additional', 0)->first()->pivot->count);
        $this->assertEquals(1, $preset->products()->wherePivot('additional', 0)->skip(1)->first()->pivot->count);

        $this->assertEquals(1, $preset->products()->wherePivot('additional', 1)->count());
        $this->assertEquals(3, $preset->products()->wherePivot('additional', 1)->first()->pivot->count);
    }




}
