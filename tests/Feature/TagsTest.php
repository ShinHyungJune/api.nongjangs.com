<?php


namespace Tests\Feature;

use App\Enums\TypeBanner;
use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Tag;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TagsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 누구나_목록을_조회할_수_있다()
    {
        // 순서순, 오픈여부 참
        $includeTags = Tag::factory()->count(5)->create([
            'open' => 1,
        ]);

        $excludeTags = Tag::factory()->count(5)->create([
            'open' => 0,
        ]);

        $items = $this->json('get', '/api/tags')->decodeResponseJson()['data'];

        $this->assertEquals(count($includeTags), count($items));
    }

    /** @test */
    public function 유형별_목록을_조회할_수_있다()
    {
        $includeBanners = Banner::factory()->count(5)->create([
            'started_at' => Carbon::now()->subDay(),
            'finished_at' => Carbon::now()->addDay(),
        ]);

        $excludeBanners = Banner::factory()->count(3)->create([
            'started_at' => Carbon::now()->addDays(1),
            'finished_at' => Carbon::now()->addDays(2),
        ]);

        $items = $this->json('get', '/api/banners')->decodeResponseJson()['data'];

        $this->assertEquals(count($includeBanners), count($items));
    }
}
