<?php


use App\Models\Bookmark;
use App\Models\Recipe;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class BookmarksTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 자신의_목록을_조회할_수_있다()
    {
        $recipe = \App\Models\Recipe::factory()->create();

        $bookmarks = Bookmark::factory()->count(3)->create([
            'bookmarkable_type' => Recipe::class,
            'bookmarkable_id' => $recipe->id,
            'user_id' => $this->user->id,
        ]);

        $items = $this->json('get', '/api/bookmarks', [
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($bookmarks), count($items));
    }

    /** @test */
    public function 레시피에_대한_데이터를_생성할_수_있다()
    {
        $recipe = \App\Models\Recipe::factory()->create();

        $this->json('post', '/api/bookmarks', [
            'bookmarkable_type' => 'App\Models\Recipe',
            'bookmarkable_id' => $recipe->id,
        ]);

        $this->assertCount(1, $this->user->bookmarks()->get());

        $this->json('post', '/api/bookmarks', [
            'bookmarkable_type' => 'App\Models\Recipe',
            'bookmarkable_id' => $recipe->id,
        ]);

        $this->assertCount(0, $this->user->bookmarks()->get());
    }

}
