<?php


use App\Enums\TypeMaterial;
use App\Enums\TypePackage;
use App\Models\Card;
use App\Models\Delivery;
use App\Models\Material;
use App\Models\Package;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PackageSettingsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;
    protected $delivery;
    protected $card;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->delivery = Delivery::factory()->create([
            'user_id' => $this->user->id
        ]);
        $this->card = Card::factory()->create([
            'user_id' => $this->user->id
        ]);
        $this->materials = Material::factory()->count(4)->create([
            'type' => TypeMaterial::PACKAGE
        ]);

        $this->actingAs($this->user);

        $this->form = [
            'type_package' => TypePackage::BUNGLE,
            'term_week' => 2,
            'delivery_id' => $this->delivery->id,
            'card_id' => $this->card->id,
            'unlike_material_ids' => $this->materials->pluck('id')->toArray(),
            'active' => 1,
        ];
    }

    /** @test */
    public function 사용자는_패키지설정을_생성할_수_있다()
    {
        /*type_package
        term_week
        delivery_id
        card_id
        unlike_merterial_ids (최대 7개만 등록 가능)
        active 활성여부 (일회성 구매일 때)*/

        $item = $this->json('post', '/api/packageSettings', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals( $this->user->packageSetting->id, $item['id']);
        $this->assertEquals( count($this->form['unlike_material_ids']), count($item['unlike_materials']));
    }

    /** @test */
    public function 패키지설정이_생성되면_이번회차기준으로_다음_결제일이_자동계산된다()
    {
        $package = Package::factory()->create([
            'will_delivery_at' => Carbon::now()->addWeek(),
        ]);
        $item = $this->json('post', '/api/packageSettings', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals(Carbon::make($package->will_delivery_at)->subDays(2)->format('Y.m.d'), $item['will_order_at']);
        $this->assertEquals( $package->id, $item['firstPackage']['id']);
    }

    /** @test */
    public function 활성여부가_거짓이라면_다음_결제일은_빈값으로_설정된다()
    {
        $package = Package::factory()->create([
            'will_delivery_at' => Carbon::now()->addWeek(),
        ]);

        $this->form['active'] = 0;

        $item = $this->json('post', '/api/packageSettings', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals(null, $item['will_order_at']);
        $this->assertEquals( null, $item['firstPackage']);
    }
}
