<?php


use App\Enums\TypeMaterial;
use App\Enums\TypePackage;
use App\Models\Card;
use App\Models\Delivery;
use App\Models\Material;
use App\Models\Package;
use App\Models\PackageSetting;
use App\Models\StopHistory;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PackageSettingsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;
    protected $delivery;
    protected $card;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->delivery = Delivery::factory()->create([
            'user_id' => $this->user->id
        ]);
        $this->card = Card::factory()->create([
            'user_id' => $this->user->id
        ]);
        $this->materials = Material::factory()->count(4)->create([
            'type' => TypeMaterial::PACKAGE
        ]);

        $this->actingAs($this->user);

        $this->form = [
            'type_package' => TypePackage::BUNGLE,
            'term_week' => 2,
            'delivery_id' => $this->delivery->id,
            'card_id' => $this->card->id,
            'unlike_material_ids' => $this->materials->pluck('id')->toArray(),
            'active' => 1,
        ];
    }

    /** @test */
    public function 사용자는_패키지설정을_생성할_수_있다()
    {
        /*type_package
        term_week
        delivery_id
        card_id
        unlike_merterial_ids (최대 7개만 등록 가능)
        active 활성여부 (일회성 구매일 때)*/

        $item = $this->json('post', '/api/packageSettings', $this->form)->decodeResponseJson()['data'];

        $this->assertEquals( $this->user->packageSetting->id, $item['id']);
        $this->assertEquals( count($this->form['unlike_material_ids']), count($item['unlike_materials']));
    }

    /** @test */
    public function 패키지설정이_생성되면_현재이용가능회차를_대상으로_출고가_생성된다()
    {
        // 출고에 pacakge_setting_active도 기록 필요 (1회성인지 아닌지 구분용)
    }

    /** @test */
    public function 패키지설정의_활성여부가_참으로_수정됐을때_진행중인_출고가_없으면_출고가_새로_생성된다()
    {
        // 대상회차가 현재구매가능한 회차로 설정되어있는 출고가 없다면 새로 생성
    }

    /** @test */
    public function 패키지설정이_생성되면_꾸러미이름이_자동생성된다()
    {
        // 닉네임의 꾸러미
        $packageSetting = PackageSetting::factory()->create();

        $this->assertNotNull($packageSetting->name);
    }

    /** @test */
    public function 꾸러미유형을_수정할_수_있다()
    {
        // 메소드를 각각 만들지말고 있는값만 수정하는식으로 수정
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
            'type_package' => TypePackage::SINGLE
        ]);

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'type_package' => TypePackage::BUNGLE,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($item['type_package'], TypePackage::BUNGLE);
    }

    /** @test */
    public function 배송주기를_수정할_수_있다()
    {
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
            'term_week' => 1
        ]);


        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'term_week' => 2
        ])->decodeResponseJson()['data'];

        $this->assertEquals(2, $item['term_week']);
    }

    /** @test */
    public function 비선호품목을_수정할_수_있다()
    {
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $unlikeMaterialIds = Material::factory()->count(3)->create()->pluck('id')->toArray();

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'unlike_material_ids' => $unlikeMaterialIds
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($unlikeMaterialIds), count($item['unlike_materials']));
    }

    /** @test */
    public function 배송지를_수정할_수_있다()
    {
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
            'delivery_id' => Delivery::factory()->create()->id,
        ]);

        $delivery = Delivery::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'delivery_id' => $delivery->id,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($item['delivery_id'], $delivery->id);
    }

    /** @test */
    public function 결제카드를_수정할_수_있다()
    {
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
            'card_id' => Card::factory()->create()->id,
        ]);

        $card = Card::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'card_id' => $card->id,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($item['card_id'], $card->id);
    }

    /** @test */
    public function 꾸러미이름을_수정할_수_있다()
    {
        $packageSetting = PackageSetting::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'name' => '1',
        ])->decodeResponseJson()['data'];

        $this->assertEquals($item['name'], '1');
    }

    /** @test */
    public function 정기구독을_정지할_수_있다()
    {
        /*
        - **active를 0으로 설정 및 중지기록 남기기**
        - **결제대기중인 presetProduct 삭제**
        */

        $packageSetting = PackageSetting::factory()->create([
            'active' => 1,
            'user_id' => $this->user->id,
        ]);

        $item = $this->json('patch', '/api/packageSettings/'.$packageSetting->id, [
            'active' => 0,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($item['active'], 0);

        $this->assertEquals(1, StopHistory::count());

        $this->assertEquals(true, false);
    }
}
