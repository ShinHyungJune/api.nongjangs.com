<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CouponsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 사용자는_자신의_유효한_목록을_조회할_수_있다()
    {
        // 유효기간이 지나지 않은것
        // 사용하지 않은것
            // order_id가 없거나 order가 before_payment거나

        $myValidCoupons = Coupon::factory()->count(5)->create([
            'user_id' => $this->user->id,
        ]);

        $order = \App\Models\Order::factory()->create([
            'state' => \App\Enums\StateOrder::SUCCESS
        ]);

        $myUseCoupons = Coupon::factory()->count(3)->create([
            'user_id' => $this->user->id,
            'order_id' => $order->id,
        ]);

        $myExpiredCoupons = Coupon::factory()->count(4)->create([
            'user_id' => $this->user->id,
            'will_finished_at' => Carbon::now()->subDays(5),
        ]);

        foreach($myExpiredCoupons as $coupon){
            $coupon->update(['will_finished_at' => Carbon::now()->subDays(5)]);
        }

        $otherCoupons = Coupon::factory()->count(6)->create([
            'user_id' => $this->other->id,
        ]);

        $items = $this->json('get', '/api/coupons')->decodeResponseJson()['data'];

        $this->assertEquals(count($myValidCoupons), count($items));
    }

    /** @test */
    public function 쿠폰을_발급_받을_수_있다()
    {
        $couponGroup = \App\Models\CouponGroup::factory()->create();

        $ongoingEvent = \App\Models\Event::factory()->create([
            'coupon_group_id' => $couponGroup->id,
            'started_at' => Carbon::now()->subDays(1),
            'finished_at' => Carbon::now()->addDays(1),
        ]);

        $this->form = [
            'coupon_group_id' => $couponGroup->id,
        ];

        $this->json('post', '/api/coupons', $this->form)->assertStatus(200);
    }
}
