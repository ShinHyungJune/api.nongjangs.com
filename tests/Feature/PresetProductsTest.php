<?php


namespace Tests\Feature;

use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Order;
use App\Models\Preset;
use App\Models\User;
use App\Models\PresetProduct;
use App\Enums\DeliveryCompany;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Enums\StatePresetProduct;

class PresetProductsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $product;
    protected $additionalProducts;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->products = \App\Models\Product::factory()->count(2)->create();

        foreach ($this->products as $product) {
            \App\Models\Color::factory()->count(3)->create(['product_id' => $product->id]);
            \App\Models\Size::factory()->count(3)->create(['product_id' => $product->id]);
            \App\Models\Product::factory()->count(3)->create(['product_id' => $product->id]);
        }

        $this->form = [
            'products' => [],
            'additionalProducts' => []
        ];

        foreach ($this->products as $product) {
            $this->form['products'][] = [
                'id' => $product->id,
                'size_id' => $product->sizes()->inRandomOrder()->first()->id,
                'color_id' => $product->colors()->inRandomOrder()->first()->id,
                'count' => 1,
            ];

            $this->form['additionalProducts'][] = [
                'id' => $product->products()->inRandomOrder()->first()->id,
                'count' => 1,
            ];
        }
    }


    /** @test */
    public function 고유번호로_상세를_조회할_수_있다()
    {
        $presetProduct = PresetProduct::factory()->create();

        $item = $this->json('get', '/api/presetProducts/' . $presetProduct->uuid)->decodeResponseJson()['data'];

        $this->assertEquals($presetProduct->id, $item['id']);
    }

    /** @test */
    public function 누구나_고유번호로_상품패키지의_문구작성내용을_수정할_수_있다()
    {
        // 회원, 비회원 누구나 가능해야함 (merchant_uid로 검사를 할가? 시안 url을 메일이나 문자로 발송할거니까)
        $test = "test";

        $this->form = [
            'title' => $test,
            'receiver' => $test,
            'description' => $test,
            'date' => $test,
            'requirement' => $test,
        ];

        $presetProduct = PresetProduct::factory()->create();

        $item = $this->json('patch', '/api/presetProducts/' . $presetProduct->uuid, $this->form)->decodeResponseJson()['data'];

        $this->assertEquals($test, $item['title']);
    }

    /** @test */
    public function 운송장번호가_공란에서_업데이트_되면_배송중_상태로_변경된다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::READY,
        ]);

        $presetProduct->update([
            'delivery_number' => '123',
            'delivery_company' => \App\Enums\DeliveryCompany::CJ
        ]);

        $presetProduct = PresetProduct::find($presetProduct->id);

        $this->assertEquals(\App\Enums\StatePresetProduct::ONGOING_DELIVERY, $presetProduct->state);
    }

    /** @test */
    public function 배송완료일자가_공란에서_업데이트되면_배송완료상태로_수정된다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => \App\Enums\StatePresetProduct::READY,
        ]);
        $presetProduct->update([
            'delivery_at' => Carbon::now()
        ]);

        $presetProduct = PresetProduct::find($presetProduct->id);

        $this->assertEquals(StatePresetProduct::DELIVERED, $presetProduct->state);
    }

    /** @test */
    public function 배송중_상태라면_데이터에서_배송조회_URL을_조회할_수_있다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_DELIVERY,
            'delivery_number' => '123',
            'delivery_company' => DeliveryCompany::CJ
        ]);

        $this->assertNotEmpty($presetProduct->delivery_url);
    }

    /** @test */
    public function 출고에서_구매확정가능여부를_조회할_수_있다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_DELIVERY,
            'delivery_number' => '123',
            'delivery_company' => DeliveryCompany::CJ
        ]);

        $this->assertEquals(0, $presetProduct->can_confirm);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
        ]);

        $this->assertEquals(1, $presetProduct->can_confirm);
    }

    /** @test */
    public function 구매확정을_할_수_있다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
        ]);

        $item = $this->json('patch', '/api/presetProducts/confirm/' . $presetProduct->id, [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(StatePresetProduct::CONFIRMED, $item['state']);
    }

    /** @test */
    public function 구매확정여부가_거짓이라면_구매확정을_할_수_없다()
    {
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_DELIVERY,
        ]);

        $this->json('patch', '/api/presetProducts/confirm/' . $presetProduct->id, [

        ])->assertStatus(403);

        $otherOrder = Order::factory()->create([
            'user_id' => $this->other->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->other->id, 'order_id' => $otherOrder->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
        ]);

        $this->json('patch', '/api/presetProducts/confirm/' . $presetProduct->id, [

        ])->assertStatus(403);
    }

    /** @test */
    public function 세트상품에서_환불가능여부를_조회할_수_있다()
    {
        // 내 세트상품
        // DELIVERED 상태일때만 가능
        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_DELIVERY,
        ]);

        $this->assertEquals(0, $presetProduct->can_refund);

        $order = Order::factory()->create([
            'user_id' => $this->user->id,
        ]);

        $preset = Preset::factory()->create(['user_id' => $this->user->id, 'order_id' => $order->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
        ]);

        $this->assertEquals(1, $presetProduct->can_refund);
    }


    public function 자동구매확정처리를_실행하면_배송완료일자로부터_4일이_지난_배송완료건들을_구매확정처리상태로_변경된다()
    {
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $targetPresetProducts = PresetProduct::factory()->count(4)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
            'delivery_at' => Carbon::now()->subDays(5)
        ]);

        $untargetPresetProducts = PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::DELIVERED,
            'delivery_at' => Carbon::now()->subDays(3)
        ]);

        $this->artisan('confirm:presetProducts');

        $this->assertEquals(count($targetPresetProducts), PresetProduct::where('state', StatePresetProduct::CONFIRMED)->count());
    }

    /** @test */
    public function 데이터에서_재구매_url을_조회할_수_있다()
    {
        $product = \App\Models\Product::factory()->create();

        $presetProduct = PresetProduct::factory()->create([
            'product_id' => $product->id
        ]);

        $presetProduct->refresh();

        $this->assertEquals('/products/' . $product->id, $presetProduct->url_reorder);
    }

    /** @test */
    public function 데이터에서_리뷰작성가능여부를_조회할_수_있다()
    {
        $product = \App\Models\Product::factory()->create();

        $presetProduct = PresetProduct::factory()->create(['product_id' => $product->id]);

        $presetProduct->refresh();

        $this->assertEquals('/products/' . $product->id, $presetProduct->url_reorder);
    }

    /** @test */
    public function 리뷰작성가능한_목록을_조회할_수_있다()
    {
        // - 내가 구매했고
        // - 리뷰작성가능여부 1(위에 attribute 봐)
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
        ]);


        $this->assertEquals(0, $presetProduct->can_review);


        // 구매확정
        $presetProduct->update(['state' => StatePresetProduct::CONFIRMED]);

        $presetProduct->refresh();

        $this->assertEquals(1, $presetProduct->can_review);


        // 남의거
        $preset = Preset::factory()->create(['user_id' => $this->other->id]);

        $otherPresetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::CONFIRMED
        ]);

        $otherPresetProduct->refresh();

        $this->assertEquals(0, $otherPresetProduct->can_review);

    }

    /** @test */
    public function 개수를_수정할_수_있다()
    {
        $count = 5;

        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'count' => 1,
            'state' => StatePresetProduct::BEFORE_PAYMENT,
        ]);

        $this->json('patch', '/api/presetProducts/count/' . $presetProduct->uuid, [
            'count' => $count
        ])->assertStatus(200);

        $presetProduct->refresh();

        $this->assertEquals(5, $presetProduct->count);


        $presetProduct->update(['state' => StatePresetProduct::ONGOING_PROTOTYPE]);

        $this->json('patch', '/api/presetProducts/count/' . $presetProduct->uuid, [
            'count' => $count
        ])->assertStatus(403);
    }

    /** @test */
    public function 데이터를_삭제할_수_있다()
    {
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'count' => 1,
            'state' => StatePresetProduct::BEFORE_PAYMENT,
            'additional' => 1,
        ]);

        $this->json('delete', '/api/presetProducts/'.$presetProduct->uuid, [

        ])->assertStatus(200);

        $this->assertEquals(0, PresetProduct::count());
    }

    /** @test */
    public function 추가상품이_아니라면_삭제할_수_없다()
    {
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'count' => 1,
            'state' => StatePresetProduct::BEFORE_PAYMENT,
            'additional' => 0,
        ]);

        $this->json('delete', '/api/presetProducts/'.$presetProduct->uuid, [

        ])->assertStatus(403);

        $this->assertEquals(1, PresetProduct::count());
    }

    /** @test */
    public function 결제전_상태가_아니라면_삭제할_수_없다()
    {
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);

        $presetProduct = PresetProduct::factory()->create([
            'preset_id' => $preset->id,
            'count' => 1,
            'state' => StatePresetProduct::READY,
            'additional' => 1,
        ]);

        $this->json('delete', '/api/presetProducts/'.$presetProduct->uuid, [

        ])->assertStatus(403);

        $this->assertEquals(1, PresetProduct::count());
    }
}
