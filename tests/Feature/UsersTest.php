<?php


namespace Feature;

use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Enums\TypeDb;
use App\Enums\TypeUser;
use App\Models\Banner;
use App\Models\BusinessCategory;
use App\Models\Company;
use App\Models\County;
use App\Models\Coupon;
use App\Models\CreateCategory;
use App\Models\Order;
use App\Models\Preset;
use App\Models\PresetProduct;
use App\Models\User;
use App\Models\VerifyNumber;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class UsersTest extends TestCase
{
    use RefreshDatabase;

    protected $form;
    protected $user;
    protected $other;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $email = "1234";
        $password = "1234";

        $this->user = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->other = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->actingAs($this->user);

        VerifyNumber::create(['ids' => "123", 'verified' => 1, 'number' => '123']);
        VerifyNumber::create(['ids' => "12341234", 'verified' => 1, 'number' => '123']);

        $this->form = [
            'email' => "123@naver.com",
            'password' => "123@naver.com",
            'password_confirmation' => "123@naver.com",
            'name' => "123@naver.com",
            'contact' => "01030217486",
            'agree_promotion' => 0,
        ];
    }

    /** @test */
    public function 누구나_생성을_할_수_있다()
    {
        /*
         * email
         * password
         * password_confirmation
         * name
         * contact (verified 된 contact)
         * agree_promotion
         * */

        $this->json('post', '/api/users')
    }

    /** @test */
    public function 인증된_전화번호로만_생성을_할_수_있다()
    {

    }

    /** @test */
    public function 사용자는_추천인코드를_업데이트할_수_있다()
    {
        // code
    }

    /** @test */
    public function 존재하지_않는_추천인코드는_업데이트할_수_없다()
    {

    }

    /** @test */
    public function 이미_추천인코드가_있다면_업데이트할_수_없다()
    {

    }

    /** @test */
    public function 추천인코드가_업데이트되면_추천자와_추천받은자에게_적립금이_지급된다()
    {
        // 포인트내역 쌓여야함 (2000p 부여)
    }

    /** @test */
    public function 누구나_비밀번호를_초기화할_수_있다()
    {
        /*email
        contact (인증전화번호)
        password
        password_confirmation*/
    }

    /** @test */
    public function 사용자는_비밀번호를_수정할_수_있다()
    {
        /*password 기존 비밀번호
password_new
password_new_confirmation*/
    }

    /** @test */
    public function 누구나_아이디를_찾을_수_있다()
    {
        // contact (인증전화번호)
    }

    /** @test */
    public function asd()
    {

    }

    /** @test */
    public function asd()
    {

    }
}
