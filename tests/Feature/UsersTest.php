<?php


namespace Feature;

use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Enums\TypeDb;
use App\Enums\TypeUser;
use App\Models\Banner;
use App\Models\BusinessCategory;
use App\Models\Company;
use App\Models\County;
use App\Models\Coupon;
use App\Models\CreateCategory;
use App\Models\Order;
use App\Models\Preset;
use App\Models\PresetProduct;
use App\Models\User;
use App\Models\VerifyNumber;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class UsersTest extends TestCase
{
    use RefreshDatabase;

    protected $form;
    protected $user;
    protected $other;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $email = "1234";
        $password = "1234";

        $this->user = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->other = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->actingAs($this->user);

        VerifyNumber::create(['ids' => "01012341234", 'verified' => 1, 'number' => '123']);

        $this->form = [
            'email' => "123@naver.com",
            'password' => "123@naver.com",
            'password_confirmation' => "123@naver.com",
            'name' => "123@naver.com",
            'contact' => "01012341234",
            'agree_promotion' => 0,
        ];
    }

    /** @test */
    public function 누구나_생성을_할_수_있다()
    {
        /*
         * email
         * password
         * password_confirmation
         * name
         * contact (verified 된 contact)
         * agree_promotion
         * */

        $count = User::count();

        $this->json('post', '/api/users', $this->form);

        $this->assertEquals($count + 1, User::count());
    }

    /** @test */
    public function 인증된_전화번호로만_생성을_할_수_있다()
    {
        VerifyNumber::where('ids', $this->form['contact'])->delete();

        $this->json('post', '/api/users', $this->form)->assertStatus(422);
    }

    /** @test */
    public function 사용자는_추천인코드를_업데이트할_수_있다()
    {
        $point = $this->user->point;

        // code
        $this->patch('/api/users/codeRecommend', [
            'code_recommend' => $this->other->code
        ])->assertStatus(200);

        $this->assertEquals($point + User::$recommendPoint, $this->user->refresh()->point);
    }

    /** @test */
    public function 존재하지_않는_추천인코드는_업데이트할_수_없다()
    {
        $point = $this->user->point;

        // code
        $this->patch('/api/users/codeRecommend', [
            'code_recommend' => '0000000000000'
        ])->assertStatus(403);
    }

    /** @test */
    public function 이미_추천인코드가_있다면_업데이트할_수_없다()
    {
        $this->user->update(['code_recommend' => '123']);

        // code
        $this->patch('/api/users/codeRecommend', [
            'code_recommend' => $this->other->code
        ])->assertStatus(403);
    }

    /** @test */
    public function 추천인코드가_업데이트되면_추천자와_추천받은자에게_적립금이_지급된다()
    {
        $pointUser = $this->user->point;
        $pointOther = $this->other->point;

        // code
        $this->patch('/api/users/codeRecommend', [
            'code_recommend' => $this->other->code
        ])->assertStatus(200);

        $this->assertEquals($pointUser + User::$recommendPoint, $this->user->refresh()->point);
        $this->assertEquals($pointOther + User::$recommendPoint, $this->other->refresh()->point);
    }

    /** @test */
    public function 누구나_비밀번호를_초기화할_수_있다()
    {
        /*email
        contact (인증전화번호)
        password
        password_confirmation*/

        $password = 'testtest';

        $verifyNumber = VerifyNumber::create(['ids' => $this->user->contact, 'verified' => 1,'number'=>123]);

        $this->json('patch','/api/users/clearPassword', [
            'email' => $this->user->email,
            'contact' => $this->user->contact,
            'password' => $password,
            'password_confirmation' => $password,
        ]);

        $this->assertTrue(Hash::check($password, $this->user->refresh()->password));
    }

    /** @test */
    public function 사용자는_비밀번호를_수정할_수_있다()
    {
        /*password 기존 비밀번호
password_new
password_new_confirmation*/

        $prevPassword = 'testtest';
        $newPassword = 'test12341234';

        $this->user->update(['password' => Hash::make($prevPassword)]);

        $this->json('patch','/api/users/password', [
            'password' => $prevPassword,
            'password_new' => $newPassword,
            'password_new_confirmation' => $newPassword,
        ]);

        $this->assertTrue(Hash::check($newPassword, $this->user->refresh()->password));
    }

    /** @test */
    public function 누구나_아이디를_찾을_수_있다()
    {
        // contact (인증전화번호)
        $verifyNumber = VerifyNumber::create(['ids' => $this->user->contact, 'verified' => 1,'number'=>123]);

        $item = $this->json('patch','/api/users/findId', [
            'contact' => $this->user->contact,
        ])->decodeResponseJson()['data'];

        $this->assertEquals($this->user->email, $item['email']);
    }

}
