<?php


namespace Feature;

use App\Enums\StateOrder;
use App\Enums\StatePresetProduct;
use App\Enums\TypeDb;
use App\Enums\TypeUser;
use App\Models\Banner;
use App\Models\BusinessCategory;
use App\Models\Company;
use App\Models\County;
use App\Models\Coupon;
use App\Models\CreateCategory;
use App\Models\Order;
use App\Models\Preset;
use App\Models\PresetProduct;
use App\Models\User;
use App\Models\VerifyNumber;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class UsersTest extends TestCase
{
    use RefreshDatabase;

    protected $form;
    protected $user;
    protected $other;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $email = "1234";
        $password = "1234";

        $this->user = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->other = User::factory()->create([
            "email" => $email,
            "password" => Hash::make($password)
        ]);

        $this->actingAs($this->user);

        VerifyNumber::create(['ids' => "123", 'verified' => 1, 'number' => '123']);
        VerifyNumber::create(['ids' => "12341234", 'verified' => 1, 'number' => '123']);

        $this->form = [
            'type' => TypeUser::COMMON,
            'name' => "123",
            'address' => "123",
            'address_detail' => "123",
            'address_zipcode' => "123",
            'contact' => "123",
            'birth' => "123",
        ];
    }

    /** @test */
    public function 사용자는_자신의_정보를_수정할_수_있다()
    {
        /*
        name
        address
        address_detail
        address_zipcode
        contact
        birth

        // nullable (값이 있을때만 업데이트)
        password
        password_confirmation
         * */
        $test = "12341234";

        $this->form = [
            'name' => $test,
            'address' => $test,
            'address_detail' => $test,
            'address_zipcode' => $test,
            'contact' => $test,
            'birth' => $test,
        ];

        $this->json('patch', '/api/users', $this->form)->assertStatus(200);

        $this->user->refresh();

        $this->assertEquals($test, $this->user->name);

        $this->form = [
            'name' => $test,
            'address' => $test,
            'address_detail' => $test,
            'address_zipcode' => $test,
            'contact' => $test,
            'birth' => $test,

            'password' => $test,
            'password_confirmation' => $test,
        ];

        $this->json('patch', '/api/users', $this->form)->assertStatus(200);

        $this->user->refresh();

        $this->assertTrue(Hash::check($test, $this->user->password));

        $this->form = [
            'name' => $test,
            'address' => $test,
            'address_detail' => $test,
            'address_zipcode' => $test,
            'contact' => $test,
            'birth' => $test,
        ];

        $this->json('patch', '/api/users', $this->form)->assertStatus(200);

        $this->user->refresh();

        $this->assertTrue(Hash::check($test, $this->user->password));
    }

    /** @test */
    public function 사용자는_일반사용자로_가입할_수_있다()
    {
        /*
        ids
        password
        password_confirmation
        name
        contact
        address
        address_detail
        address_zipcode
        email

        type을 COMMON로 세팅 필요
         * */

        $this->form = [
            "type" => TypeUser::COMMON,
            "ids" => "123",
            "password" => "12341234",
            "password_confirmation" => "12341234",
            'name' => "123",
            'contact' => "123",
            'address' => "123",
            'address_detail' => "123",
            'address_zipcode' => "123",
            'email' => "123@naver.com",
        ];

        $this->json('post', '/api/users', $this->form)->assertStatus(200);
    }

    /** @test */
    public function 사용자는_사업자로_가입할_수_있다()
    {
        /*
         ids
        password
        password_confirmation
        name
        contact
        address
        address_detail
        address_zipcode
        email

        - business_number nullable 사업자번호
        - company_title  nullable 회사명
        - company_president nullable 대표자명
        - company_size nullable 기업형태
        - company_type nullable 업종
        - company_category nullable 업태

        type을 COMPANY로 세팅 필요
         * */

        $this->form = [
            "type" => TypeUser::COMPANY,
            "ids" => "123",
            "password" => "12341234",
            "password_confirmation" => "12341234",
            'name' => "123",
            'contact' => "123",
            'address' => "123",
            'address_detail' => "123",
            'address_zipcode' => "123",
            'email' => "123@naver.com",

            'business_number' => "123",
            'company_title' => "123",
            'company_president' => "123",
            'company_size' => "123",
            'company_type' => "123",
            'company_category' => "123",
        ];

        $this->json('post', '/api/users', $this->form)->assertStatus(200);
    }

    /** @test */
    public function 사용자가_생성되면_회원가입포인트가_부여된다()
    {
        // - 1000포인트
        // - 포인트기록도 생성되어야함
        $this->form = [
            "type" => TypeUser::COMMON,
            "ids" => "123",
            "password" => "12341234",
            "password_confirmation" => "12341234",
            'name' => "123",
            'contact' => "123",
            'address' => "123",
            'address_detail' => "123",
            'address_zipcode' => "123",
            'email' => "123@naver.com",
        ];

        $item = $this->json('post', '/api/users', $this->form)->decodeResponseJson()['data']['user'];

        $user = User::find($item['id']);

        $this->assertEquals(User::$createPoint, $item['point']);
        $this->assertEquals(1, $user->pointHistories()->count());
    }

    /** @test */
    public function 사용자에서_사용가능_쿠폰수를_조회할_수_있다()
    {
        $coupons = Coupon::factory()->count(5)->create([
            'user_id' => $this->user->id,
        ]);

        $expiredCoupons = Coupon::factory()->count(3)->create([
            'user_id' => $this->user->id,
        ]);
        Coupon::whereIn('id', $expiredCoupons->pluck("id"))->update(['will_finished_at' => Carbon::now()->subDays(3)]);

        $useCoupons = Coupon::factory()->count(4)->create([
            'user_id' => $this->user->id,
            'order_id' => Order::factory()->create(['state' => StateOrder::SUCCESS])
        ]);

        $this->user->refresh();

        $this->assertEquals(count($coupons), $this->user->count_valid_coupon);
    }

    /** @test */
    public function 사용자에서_진행중인_출고수를_조회할_수_있다()
    {
        $preset = Preset::factory()->create(['user_id' => $this->user->id]);
        
        $beforePaymentPresetProducts = PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::BEFORE_PAYMENT
        ]);

        $ongoingPrototypePresetProducts = PresetProduct::factory()->count(4)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_PROTOTYPE
        ]);

        $ongoingDeliveryPresetProducts = PresetProduct::factory()->count(4)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::ONGOING_DELIVERY
        ]);

        $confirmDeliveryPresetProducts = PresetProduct::factory()->count(3)->create([
            'preset_id' => $preset->id,
            'state' => StatePresetProduct::CONFIRMED
        ]);

        $this->user->refresh();

        $this->assertEquals(count($ongoingDeliveryPresetProducts) + count($ongoingPrototypePresetProducts), count($this->user->ongoingPresetProducts));
    }

    /** @test */
    public function 비밀번호를_초기화할_수_있다()
    {
        $test = "12341234";

        $this->user->update(['contact' => '01000000000']);

        $this->form = [
            'contact' => $this->user->contact,
            'ids' => $this->user->ids,
            'password' => $test,
            'password_confirmation' => $test,
        ];

        VerifyNumber::factory()->create([
            'ids' => $this->user->contact,
            'verified' => 1,
        ]);

        $this->json('post', '/api/findPasswords', $this->form)->assertStatus(200);

        $this->user->refresh();

        $this->assertTrue(Hash::check($test, $this->user->password));
    }

    /** @test */
    public function 아이디를_찾을_수_있다()
    {
        $this->user->update(['contact' => '01000000000']);

        $this->form = [
            'contact' => $this->user->contact,
        ];

        VerifyNumber::factory()->create([
            'ids' => $this->user->contact,
            'verified' => 1,
        ]);

        $ids = $this->json('post', '/api/findIds', $this->form)->decodeResponseJson()['data']['ids'];

        $this->assertEquals($this->user->ids, $ids);
    }
}
