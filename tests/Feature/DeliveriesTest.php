<?php



use App\Enums\TypeDb;
use App\Enums\TypeUser;
use App\Models\Banner;
use App\Models\BusinessCategory;
use App\Models\Company;
use App\Models\County;
use App\Models\CreateCategory;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class DeliveriesTest extends TestCase
{
    use RefreshDatabase;

    protected $form;
    protected $user;
    protected $other;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        $this->user = User::factory()->create([]);

        $this->other = User::factory()->create([]);

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 자신의_목록을_조회할_수_있다()
    {
        $myDeliveries = \App\Models\Delivery::factory()->count(5)->create([
            'user_id' => $this->user->id,
        ]);

        $otherDeliveries = \App\Models\Delivery::factory()->count(3)->create([
            'user_id' => $this->other->id,
        ]);

        $items = $this->json('get', '/api/deliveries', [

        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($myDeliveries), count($items));
    }

    /** @test */
    public function 자신의_데이터를_생성할_수_있다()
    {
        $this->form = [
            'main' => 1,
            'name' => '123',
            'contact' => '123',
            'address' => '123',
            'address_detail' => '123',
            'address_zipcode' => '123',
        ];

        $this->json('post', '/api/deliveries', $this->form)->assertStatus(200);

    }

    /** @test */
    public function 자신의_데이터를_수정할_수_있다()
    {
        $delivery = \App\Models\Delivery::factory()->create([
            'user_id'=>$this->user->id
        ]);

        $test = 'test';

        $this->form = [
            'main' => 1,
            'name' => $test,
            'contact' => $test,
            'address' => '123',
            'address_detail' => '123',
            'address_zipcode' => '123',
        ];

        $item = $this->json('patch', '/api/deliveries/'.$delivery->id, $this->form)->decodeResponseJson()['data'];

        $this->assertEquals($test, $item['name']);
    }

    /** @test */
    public function 자신의_데이터를_삭제할_수_있다()
    {
        $delivery = \App\Models\Delivery::factory()->create([
            'user_id'=>$this->user->id
        ]);

        $item = $this->json('delete', '/api/deliveries/'.$delivery->id)->decodeResponseJson()['data'];

        $this->assertEquals(0, count($this->user->deliveries));
    }

    /** @test */
    public function 삭제되는_데이터가_대표배송지라면_다른_배송지가_대표배송지가_된다()
    {
        // 남은 배송지가 없을수도 있음 (오류주의)
        $mainDelivery = \App\Models\Delivery::factory()->create([
            'user_id'=>$this->user->id,
            'main' => 1
        ]);

        $notMainDelivery = \App\Models\Delivery::factory()->create([
            'user_id' => $this->user->id,
            'main' => 0
        ]);

        $item = $this->json('delete', '/api/deliveries/'.$mainDelivery->id);

        $notMainDelivery->refresh();

        $this->assertEquals(1, $notMainDelivery->main);
    }

    /** @test */
    public function 배송지가_메인이_되면_다른_배송지는_메인이_아니게된다()
    {
        // 남은 배송지가 없을수도 있음 (오류주의)
        $mainDelivery = \App\Models\Delivery::factory()->create([
            'user_id'=>$this->user->id,
            'main' => 1
        ]);

        $notMainDelivery = \App\Models\Delivery::factory()->create([
            'user_id' => $this->user->id,
            'main' => 0
        ]);

        $this->json('patch', '/api/deliveries/'.$notMainDelivery->id, array_merge($notMainDelivery->toArray(), [
            'main' => 1
        ]));

        $notMainDelivery->refresh();

        $this->assertEquals(1, $notMainDelivery->main);
    }
}
