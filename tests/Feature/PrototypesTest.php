<?php



use App\Models\Banner;
use App\Models\Coupon;
use App\Models\Program;
use App\Models\User;
use App\Models\Waiting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PrototypesTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 세트상품별_목록을_조회할_수_있다()
    {
        $presetProduct = \App\Models\PresetProduct::factory()->create();

        $prototypes = \App\Models\Prototype::factory()->count(5)->create([
            'preset_product_id' => $presetProduct->id,
        ]);

        $otherPrototypes = \App\Models\Prototype::factory()->count(5)->create([
            'preset_product_id' => \App\Models\PresetProduct::factory()->create()->id,
        ]);

        $items = $this->json('get', '/api/prototypes', [
            'preset_product_uuid' => $presetProduct->uuid,
        ])->decodeResponseJson()['data'];

        $this->assertEquals(count($prototypes), count($items));
    }

    /** @test */
    public function 시안을_컨펌할_수_있다()
    {
        // merchant_uuid (주문번호로 시안 컨펌)
        $presetProduct = \App\Models\PresetProduct::factory()->create([
            'state' => \App\Enums\StatePresetProduct::FINISH_PROTOTYPE
        ]);

        $prototype = \App\Models\Prototype::factory()->create([
            'preset_product_id' => $presetProduct->id,
        ]);

        $this->json('patch', '/api/prototypes/confirm/'.$prototype->id, [
            'preset_product_uuid' => $prototype->presetProduct->uuid,
        ])->assertStatus(200);

        $this->assertEquals(1, $prototype->refresh()->confirmed);
    }

    /** @test */
    public function 시안을_컨펌하고_나면_더_이상_컨펌을_할_수_없다()
    {
        // merchant_uuid (주문번호로 시안 컨펌)
        $presetProduct = \App\Models\PresetProduct::factory()->create([
            'state' => \App\Enums\StatePresetProduct::FINISH_PROTOTYPE
        ]);

        $prototype = \App\Models\Prototype::factory()->create([
            'preset_product_id' => $presetProduct->id,
            'confirmed' => 1,
        ]);

        $this->json('patch', '/api/prototypes/confirm/'.$prototype->id, [
            'preset_product_uuid' => $prototype->presetProduct->uuid,
        ])->assertStatus(403);
    }

    /** @test */
    public function 난수번호가_일치하지_않다면_시안을_컨펌할_수_없다()
    {
        // merchant_uuid (주문번호로 시안 컨펌)
        $presetProduct = \App\Models\PresetProduct::factory()->create([
            'state' => \App\Enums\StatePresetProduct::FINISH_PROTOTYPE
        ]);

        $prototype = \App\Models\Prototype::factory()->create([
            'preset_product_id' => $presetProduct->id,
        ]);

        $this->json('patch', '/api/prototypes/confirm/'.$prototype->id, [
            'preset_product_uuid' => "1234",
        ])->assertStatus(403);
    }

    /** @test */
    public function 시안제작완료된_상품만_시안을_컨펌할_수_있다()
    {
        $presetProduct = \App\Models\PresetProduct::factory()->create();

        $prototype = \App\Models\Prototype::factory()->create([
            'preset_product_id' => $presetProduct->id,
        ]);

        $presetProduct->update(['state' => \App\Enums\StatePresetProduct::ONGOING_PROTOTYPE]);

        $this->json('patch', '/api/prototypes/confirm/'.$prototype->id, [
            'preset_product_uuid' => $presetProduct->uuid,
        ])->assertStatus(403);
    }

    /** @test */
    public function 시안이_생성되면_상품은_시안제작완료상태가_된다()
    {
        $presetProduct = \App\Models\PresetProduct::factory()->create([
            'state' => \App\Enums\StatePresetProduct::ONGOING_PROTOTYPE
        ]);

        $prototype = \App\Models\Prototype::factory()->create([
            'preset_product_id' => $presetProduct->id,
        ]);

        $this->assertEquals(\App\Enums\StatePresetProduct::FINISH_PROTOTYPE, $presetProduct->refresh()->state);
    }
}
