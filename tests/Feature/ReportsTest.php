<?php


use App\Models\Count;
use App\Models\Product;
use App\Models\Report;
use App\Models\ReportCategory;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ReportsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected $other;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->form = [

        ];
    }

    /** @test */
    public function 사용자는_데이터를_생성할_수_있다()
    {
        $product = Product::factory()->create();

        $this->form = [
            'report_category_id' => ReportCategory::factory()->create()->id,
            'reportable_id' => $product->id,
            'reportable_type' => Product::class,
            'description' => 'description'
        ];

        $this->json('post', '/api/reports', $this->form)->assertStatus(200);

        $this->assertEquals(1, Report::count());
    }

    /** @test */
    public function 사용자는_같은_대상에_대해_데이터를_중복생성할_수_없다()
    {
        $product = Product::factory()->create();

        $this->form = [
            'report_category_id' => ReportCategory::factory()->create()->id,
            'reportable_id' => $product->id,
            'reportable_type' => Product::class,
            'description' => 'description'
        ];

        $this->json('post', '/api/reports', $this->form)->assertStatus(200);

        $this->assertEquals(1, Report::count());

        $this->json('post', '/api/reports', $this->form)->assertStatus(403);
    }
}
